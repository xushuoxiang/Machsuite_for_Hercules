-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ms_mergesort_merge_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_we0 : OUT STD_LOGIC;
    a_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    checkdata_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    checkdata_ce0 : OUT STD_LOGIC;
    checkdata_we0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    checkdata_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    start_r : IN STD_LOGIC_VECTOR (31 downto 0);
    m : IN STD_LOGIC_VECTOR (31 downto 0);
    stop : IN STD_LOGIC_VECTOR (31 downto 0);
    global_time_1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    global_time_1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    global_time_1_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ms_mergesort_merge_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_3_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv41_reg_198 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_1_reg_207 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv36_reg_216 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_reg_225 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_load_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln32_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln23_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln23_fu_267_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln23_reg_629 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln23_1_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln24_fu_282_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln24_reg_638 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln9_fu_291_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln9_reg_648 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln12_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln12_reg_653 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_3_fu_299_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln23_1_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_1_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal add9_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add9_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_reg_673 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln32_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_1_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_2_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_2_reg_687 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln32_1_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal sub_ln10_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln10_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_1_fu_411_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln9_1_reg_707 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln12_1_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln12_1_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_5_fu_419_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal add_ln32_1_fu_425_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln49_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln49_1_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln49_1_reg_746 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln49_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_load_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_load_reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln49_1_fu_508_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln49_1_reg_775 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal temp_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal temp_ce1 : STD_LOGIC;
    signal temp_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_i_3_phi_fu_191_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_k_phi_fu_228_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln24_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln33_1_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_2_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_3_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln52_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal checkdata_addr_3_gep_fu_181_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln13_6_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_4_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_2_fu_349_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_global_time_1_load_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_3_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_j_2_load : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln12_fu_332_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln12_2_fu_449_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln12_1_fu_546_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln12_s_fu_573_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln23_fu_253_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln23_1_fu_263_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln23_1_fu_263_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln23_2_fu_273_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp4_fu_320_p6 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln13_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln13_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_361_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln33_fu_397_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln32_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_439_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_ln13_1_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln13_1_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln49_fu_472_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln9_3_fu_520_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_6_fu_526_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln53_fu_533_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln12_1_fu_546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln10_1_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln12_s_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln10_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_condition_276 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component ms_mergesort_merge_1_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp_U : component ms_mergesort_merge_1_temp
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => a_q0,
        q0 => temp_q0,
        address1 => temp_address1,
        ce1 => temp_ce1,
        q1 => temp_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln23_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln23_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln32_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln32_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_3_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_3_reg_188 <= start_r;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln23_1_reg_634 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_3_reg_188 <= add_ln23_1_reg_663;
            end if; 
        end if;
    end process;

    i_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_fu_60 <= start_r;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_fu_60 <= i_4_fu_559_p2;
            end if; 
        end if;
    end process;

    indvars_iv36_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvars_iv36_reg_216 <= sext_ln32_fu_376_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln32_1_fu_388_p2 = ap_const_lv1_0))) then 
                indvars_iv36_reg_216 <= add_ln13_5_fu_419_p2;
            end if; 
        end if;
    end process;

    indvars_iv41_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv41_reg_198 <= sext_ln23_fu_259_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln23_1_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvars_iv41_reg_198 <= add_ln13_3_fu_299_p2;
            end if; 
        end if;
    end process;

    j_1_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_1_reg_207 <= sext_ln32_1_fu_380_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln32_1_fu_388_p2 = ap_const_lv1_0))) then 
                j_1_reg_207 <= add_ln32_1_fu_425_p2;
            end if; 
        end if;
    end process;

    j_2_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_2_fu_64 <= stop;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j_2_fu_64 <= j_3_fu_586_p2;
            end if; 
        end if;
    end process;

    k_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_reg_751 = ap_const_lv1_1))) then 
                k_reg_225 <= add_ln49_1_reg_775;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                k_reg_225 <= sext_ln49_fu_472_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add9_reg_668 <= add9_fu_366_p2;
                icmp_ln32_reg_673 <= icmp_ln32_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln23_1_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln23_1_reg_663 <= add_ln23_1_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln23_reg_629 <= add_ln23_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln49_fu_487_p2 = ap_const_lv1_1))) then
                add_ln49_1_reg_775 <= add_ln49_1_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_fu_487_p2 = ap_const_lv1_1))) then
                i_load_reg_755 <= ap_sig_allocacmp_i_load;
                j_2_load_reg_760 <= ap_sig_allocacmp_j_2_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln23_1_reg_634 <= icmp_ln23_1_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln23_reg_620 <= icmp_ln23_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln32_1_reg_692 <= icmp_ln32_1_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln49_reg_751 <= icmp_ln49_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln32_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln23_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then
                reg_249 <= grp_load_fu_235_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sext_ln32_2_reg_687 <= sext_ln32_2_fu_384_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sext_ln49_1_reg_746 <= sext_ln49_1_fu_475_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln32_1_fu_388_p2 = ap_const_lv1_0))) then
                sub_ln10_reg_701 <= sub_ln10_fu_406_p2;
                trunc_ln12_1_reg_712 <= trunc_ln12_1_fu_415_p1;
                trunc_ln9_1_reg_707 <= trunc_ln9_1_fu_411_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln23_1_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln12_reg_653 <= trunc_ln12_fu_295_p1;
                trunc_ln24_reg_638 <= trunc_ln24_fu_282_p1;
                trunc_ln9_reg_648 <= trunc_ln9_fu_291_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln23_fu_253_p2, ap_CS_fsm_state4, icmp_ln32_fu_371_p2, icmp_ln23_1_fu_277_p2, ap_enable_reg_pp0_iter0, icmp_ln32_1_fu_388_p2, ap_enable_reg_pp1_iter0, icmp_ln49_fu_487_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln23_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln23_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln23_1_fu_277_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln23_1_fu_277_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln32_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln32_1_fu_388_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln32_1_fu_388_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln49_fu_487_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln49_fu_487_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0, ap_block_pp2_stage0, zext_ln24_fu_286_p1, zext_ln33_fu_401_p1, ap_block_pp1_stage0, zext_ln53_fu_537_p1, icmp_ln52_fu_514_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln52_fu_514_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln52_fu_514_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            a_address0 <= zext_ln53_fu_537_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            a_address0 <= zext_ln33_fu_401_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            a_address0 <= zext_ln24_fu_286_p1(11 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, icmp_ln52_fu_514_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_d0_assign_proc : process(temp_q0, temp_q1, icmp_ln52_fu_514_p2, ap_condition_276)
    begin
        if ((ap_const_boolean_1 = ap_condition_276)) then
            if ((icmp_ln52_fu_514_p2 = ap_const_lv1_1)) then 
                a_d0 <= temp_q1;
            elsif ((icmp_ln52_fu_514_p2 = ap_const_lv1_0)) then 
                a_d0 <= temp_q0;
            else 
                a_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            a_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, icmp_ln52_fu_514_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add9_fu_366_p2 <= std_logic_vector(signed(j_fu_361_p2) + signed(stop));
    add_ln13_2_fu_349_p2 <= std_logic_vector(unsigned(add_ln13_fu_344_p2) + unsigned(reg_249));
    add_ln13_3_fu_299_p2 <= std_logic_vector(unsigned(indvars_iv41_reg_198) + unsigned(ap_const_lv64_1));
    add_ln13_4_fu_460_p2 <= std_logic_vector(signed(reg_249) + signed(sub_ln13_1_fu_456_p2));
    add_ln13_5_fu_419_p2 <= std_logic_vector(unsigned(indvars_iv36_reg_216) + unsigned(ap_const_lv64_1));
    add_ln13_6_fu_526_p0 <= grp_load_fu_235_p1;
    add_ln13_6_fu_526_p2 <= std_logic_vector(unsigned(add_ln13_6_fu_526_p0) + unsigned(ap_const_lv32_1));
    add_ln13_fu_344_p1 <= m;
    add_ln13_fu_344_p2 <= std_logic_vector(unsigned(sub_ln13_fu_339_p2) + unsigned(add_ln13_fu_344_p1));
    add_ln23_1_fu_305_p2 <= std_logic_vector(signed(ap_phi_mux_i_3_phi_fu_191_p4) + signed(ap_const_lv32_1));
    add_ln23_fu_267_p2 <= std_logic_vector(signed(sext_ln23_1_fu_263_p1) + signed(ap_const_lv33_1));
    add_ln32_1_fu_425_p2 <= std_logic_vector(unsigned(j_1_reg_207) + unsigned(ap_const_lv64_1));
    add_ln49_1_fu_508_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_phi_fu_228_p4) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_276_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
                ap_condition_276 <= ((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln23_1_fu_277_p2)
    begin
        if ((icmp_ln23_1_fu_277_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln32_1_fu_388_p2)
    begin
        if ((icmp_ln32_1_fu_388_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state8_assign_proc : process(icmp_ln49_fu_487_p2)
    begin
        if ((icmp_ln49_fu_487_p2 = ap_const_lv1_0)) then 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_3_phi_fu_191_p4_assign_proc : process(i_3_reg_188, icmp_ln23_1_reg_634, ap_CS_fsm_pp0_stage0, add_ln23_1_reg_663, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln23_1_reg_634 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_3_phi_fu_191_p4 <= add_ln23_1_reg_663;
        else 
            ap_phi_mux_i_3_phi_fu_191_p4 <= i_3_reg_188;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_228_p4_assign_proc : process(k_reg_225, icmp_ln49_reg_751, ap_CS_fsm_pp2_stage0, add_ln49_1_reg_775, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln49_reg_751 = ap_const_lv1_1))) then 
            ap_phi_mux_k_phi_fu_228_p4 <= add_ln49_1_reg_775;
        else 
            ap_phi_mux_k_phi_fu_228_p4 <= k_reg_225;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_global_time_1_load_2_assign_proc : process(global_time_1_i, ap_CS_fsm_state4, icmp_ln23_reg_620, add_ln13_2_fu_349_p2)
    begin
        if (((icmp_ln23_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_sig_allocacmp_global_time_1_load_2 <= add_ln13_2_fu_349_p2;
        else 
            ap_sig_allocacmp_global_time_1_load_2 <= global_time_1_i;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln52_fu_514_p2, i_fu_60, i_4_fu_559_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln52_fu_514_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_sig_allocacmp_i_load <= i_4_fu_559_p2;
        else 
            ap_sig_allocacmp_i_load <= i_fu_60;
        end if; 
    end process;


    ap_sig_allocacmp_j_2_load_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln52_fu_514_p2, j_2_fu_64, j_3_fu_586_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln52_fu_514_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_sig_allocacmp_j_2_load <= j_3_fu_586_p2;
        else 
            ap_sig_allocacmp_j_2_load <= j_2_fu_64;
        end if; 
    end process;

    checkdata_addr_3_gep_fu_181_p3 <= zext_ln9_3_fu_520_p1(21 - 1 downto 0);

    checkdata_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0, ap_block_pp2_stage0, zext_ln9_fu_316_p1, ap_block_pp1_stage0, zext_ln9_2_fu_435_p1, zext_ln9_3_fu_520_p1, icmp_ln52_fu_514_p2, checkdata_addr_3_gep_fu_181_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln52_fu_514_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            checkdata_address0 <= checkdata_addr_3_gep_fu_181_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln52_fu_514_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            checkdata_address0 <= zext_ln9_3_fu_520_p1(21 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            checkdata_address0 <= zext_ln9_2_fu_435_p1(21 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            checkdata_address0 <= zext_ln9_fu_316_p1(21 - 1 downto 0);
        else 
            checkdata_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    checkdata_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, icmp_ln52_fu_514_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            checkdata_ce0 <= ap_const_logic_1;
        else 
            checkdata_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    checkdata_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0, ap_block_pp2_stage0, ap_block_pp1_stage0, icmp_ln52_fu_514_p2, or_ln12_fu_332_p2, or_ln12_2_fu_449_p2, or_ln12_1_fu_546_p5, or_ln12_s_fu_573_p5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln52_fu_514_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            checkdata_d0 <= or_ln12_s_fu_573_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln52_fu_514_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            checkdata_d0 <= or_ln12_1_fu_546_p5;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            checkdata_d0 <= or_ln12_2_fu_449_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            checkdata_d0 <= or_ln12_fu_332_p2;
        else 
            checkdata_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    checkdata_we0_assign_proc : process(icmp_ln23_1_reg_634, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln32_1_reg_692, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, icmp_ln52_fu_514_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln23_1_reg_634 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln32_1_reg_692 = ap_const_lv1_0)))) then 
            checkdata_we0 <= ap_const_lv16_FFFF;
        else 
            checkdata_we0 <= ap_const_lv16_0;
        end if; 
    end process;


    global_time_1_o_assign_proc : process(global_time_1_i, ap_CS_fsm_state4, icmp_ln23_reg_620, icmp_ln32_reg_673, ap_CS_fsm_state7, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln52_fu_514_p2, add_ln13_6_fu_526_p2, add_ln13_4_fu_460_p2, add_ln13_2_fu_349_p2)
    begin
        if (((icmp_ln23_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            global_time_1_o <= add_ln13_2_fu_349_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln32_reg_673 = ap_const_lv1_0))) then 
            global_time_1_o <= add_ln13_4_fu_460_p2;
        elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln52_fu_514_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln52_fu_514_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            global_time_1_o <= add_ln13_6_fu_526_p2;
        else 
            global_time_1_o <= global_time_1_i;
        end if; 
    end process;


    global_time_1_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, icmp_ln23_reg_620, icmp_ln32_reg_673, ap_CS_fsm_state7, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, icmp_ln52_fu_514_p2)
    begin
        if ((((icmp_ln23_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln52_fu_514_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln32_reg_673 = ap_const_lv1_0)))) then 
            global_time_1_o_ap_vld <= ap_const_logic_1;
        else 
            global_time_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_239_p2 <= std_logic_vector(unsigned(stop) + unsigned(ap_const_lv32_1));

    grp_load_fu_235_p1_assign_proc : process(ap_CS_fsm_state1, global_time_1_i, icmp_ln23_fu_253_p2, ap_CS_fsm_state4, icmp_ln32_fu_371_p2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_sig_allocacmp_global_time_1_load_2)
    begin
        if (((icmp_ln32_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_load_fu_235_p1 <= ap_sig_allocacmp_global_time_1_load_2;
        elsif ((((icmp_ln23_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            grp_load_fu_235_p1 <= global_time_1_i;
        else 
            grp_load_fu_235_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_4_fu_559_p2 <= std_logic_vector(unsigned(i_load_reg_755) + unsigned(ap_const_lv32_1));
    icmp_ln23_1_fu_277_p2 <= "1" when (sext_ln23_2_fu_273_p1 = add_ln23_reg_629) else "0";
    icmp_ln23_fu_253_p0 <= start_r;
    icmp_ln23_fu_253_p1 <= m;
    icmp_ln23_fu_253_p2 <= "1" when (signed(icmp_ln23_fu_253_p0) > signed(icmp_ln23_fu_253_p1)) else "0";
    icmp_ln32_1_fu_388_p2 <= "1" when (j_1_reg_207 = sext_ln32_2_reg_687) else "0";
    icmp_ln32_fu_371_p2 <= "1" when (signed(j_fu_361_p2) > signed(stop)) else "0";
    icmp_ln49_fu_487_p2 <= "1" when (signed(ap_phi_mux_k_phi_fu_228_p4) < signed(sext_ln49_1_reg_746)) else "0";
    icmp_ln52_fu_514_p2 <= "1" when (signed(temp_q1) < signed(temp_q0)) else "0";
    j_3_fu_586_p2 <= std_logic_vector(unsigned(j_2_load_reg_760) + unsigned(ap_const_lv32_FFFFFFFF));
    j_fu_361_p0 <= m;
    j_fu_361_p2 <= std_logic_vector(signed(j_fu_361_p0) + signed(ap_const_lv32_1));
    or_ln12_1_fu_546_p1 <= grp_load_fu_235_p1;
    or_ln12_1_fu_546_p5 <= (((or_ln12_1_fu_546_p1 & temp_q0) & trunc_ln10_1_fu_542_p1) & ap_const_lv32_0);
    or_ln12_2_fu_449_p2 <= (tmp8_fu_439_p5 or ap_const_lv128_lc_1);
    or_ln12_fu_332_p2 <= (tmp4_fu_320_p6 or ap_const_lv128_lc_1);
    or_ln12_s_fu_573_p1 <= grp_load_fu_235_p1;
    or_ln12_s_fu_573_p5 <= (((or_ln12_s_fu_573_p1 & temp_q1) & trunc_ln10_fu_569_p1) & ap_const_lv32_0);
    sext_ln23_1_fu_263_p0 <= m;
        sext_ln23_1_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_1_fu_263_p0),33));

        sext_ln23_2_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_i_3_phi_fu_191_p4),33));

        sext_ln23_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_load_fu_235_p1),64));

        sext_ln32_1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_fu_361_p2),64));

        sext_ln32_2_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_239_p2),64));

        sext_ln32_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_load_fu_235_p1),64));

        sext_ln49_1_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_239_p2),64));

    sext_ln49_fu_472_p0 <= start_r;
        sext_ln49_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln49_fu_472_p0),64));

    sub_ln10_fu_406_p2 <= std_logic_vector(unsigned(add9_reg_668) - unsigned(trunc_ln32_fu_393_p1));
    sub_ln13_1_fu_456_p1 <= m;
    sub_ln13_1_fu_456_p2 <= std_logic_vector(unsigned(stop) - unsigned(sub_ln13_1_fu_456_p1));
    sub_ln13_fu_339_p1 <= start_r;
    sub_ln13_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) - unsigned(sub_ln13_fu_339_p1));

    temp_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp2_stage0, zext_ln23_fu_311_p1, ap_block_pp1_stage0, zext_ln33_1_fu_431_p1, zext_ln51_fu_503_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            temp_address0 <= zext_ln51_fu_503_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            temp_address0 <= zext_ln33_1_fu_431_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            temp_address0 <= zext_ln23_fu_311_p1(11 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;

    temp_address1 <= zext_ln50_fu_498_p1(11 - 1 downto 0);

    temp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            temp_ce1 <= ap_const_logic_1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(icmp_ln23_1_reg_634, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln32_1_reg_692, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln23_1_reg_634 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln32_1_reg_692 = ap_const_lv1_0)))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp4_fu_320_p6 <= ((((trunc_ln12_reg_653 & a_q0) & ap_const_lv21_0) & trunc_ln24_reg_638) & ap_const_lv32_0);
    tmp8_fu_439_p5 <= (((trunc_ln12_1_reg_712 & a_q0) & sub_ln10_reg_701) & ap_const_lv32_0);
    trunc_ln10_1_fu_542_p1 <= k_reg_225(32 - 1 downto 0);
    trunc_ln10_fu_569_p1 <= k_reg_225(32 - 1 downto 0);
    trunc_ln12_1_fu_415_p1 <= indvars_iv36_reg_216(32 - 1 downto 0);
    trunc_ln12_fu_295_p1 <= indvars_iv41_reg_198(32 - 1 downto 0);
    trunc_ln24_fu_282_p1 <= ap_phi_mux_i_3_phi_fu_191_p4(11 - 1 downto 0);
    trunc_ln32_fu_393_p1 <= j_1_reg_207(32 - 1 downto 0);
    trunc_ln33_fu_397_p1 <= j_1_reg_207(11 - 1 downto 0);
    trunc_ln53_fu_533_p1 <= k_reg_225(11 - 1 downto 0);
    trunc_ln9_1_fu_411_p1 <= indvars_iv36_reg_216(21 - 1 downto 0);
    trunc_ln9_fu_291_p1 <= indvars_iv41_reg_198(21 - 1 downto 0);
    zext_ln23_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_188),64));
    zext_ln24_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln24_fu_282_p1),64));
    zext_ln33_1_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln10_reg_701),64));
    zext_ln33_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln33_fu_397_p1),64));
    zext_ln50_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_2_load),64));
    zext_ln51_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_load),64));
    zext_ln53_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln53_fu_533_p1),64));
    zext_ln9_2_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln9_1_reg_707),64));
    zext_ln9_3_fu_520_p0 <= grp_load_fu_235_p1;
    zext_ln9_3_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln9_3_fu_520_p0),64));
    zext_ln9_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln9_reg_648),64));
end behav;
