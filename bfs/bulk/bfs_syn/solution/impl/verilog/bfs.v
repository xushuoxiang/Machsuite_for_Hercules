// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bfs_bfs,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.323000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=792,HLS_SYN_LUT=1781,HLS_VERSION=2020_2}" *)

module bfs (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        nodes_address0,
        nodes_ce0,
        nodes_q0,
        edges_address0,
        edges_ce0,
        edges_q0,
        starting_node,
        level_address0,
        level_ce0,
        level_we0,
        level_d0,
        level_q0,
        level_counts_address0,
        level_counts_ce0,
        level_counts_we0,
        level_counts_d0,
        checkdata_address0,
        checkdata_ce0,
        checkdata_we0,
        checkdata_d0,
        checkdata_address1,
        checkdata_ce1,
        checkdata_we1,
        checkdata_d1,
        hercules_buffer_size,
        hercules_buffer_size_ap_vld
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_pp0_stage0 = 8'd32;
parameter    ap_ST_fsm_pp0_stage1 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] nodes_address0;
output   nodes_ce0;
input  [127:0] nodes_q0;
output  [11:0] edges_address0;
output   edges_ce0;
input  [63:0] edges_q0;
input  [63:0] starting_node;
output  [7:0] level_address0;
output   level_ce0;
output   level_we0;
output  [7:0] level_d0;
input  [7:0] level_q0;
output  [3:0] level_counts_address0;
output   level_counts_ce0;
output   level_counts_we0;
output  [63:0] level_counts_d0;
output  [20:0] checkdata_address0;
output   checkdata_ce0;
output  [15:0] checkdata_we0;
output  [127:0] checkdata_d0;
output  [20:0] checkdata_address1;
output   checkdata_ce1;
output  [15:0] checkdata_we1;
output  [127:0] checkdata_d1;
output  [31:0] hercules_buffer_size;
output   hercules_buffer_size_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg nodes_ce0;
reg edges_ce0;
reg[7:0] level_address0;
reg level_ce0;
reg level_we0;
reg[7:0] level_d0;
reg[3:0] level_counts_address0;
reg level_counts_ce0;
reg level_counts_we0;
reg[63:0] level_counts_d0;
reg[20:0] checkdata_address0;
reg checkdata_ce0;
reg[15:0] checkdata_we0;
reg[127:0] checkdata_d0;
reg[20:0] checkdata_address1;
reg checkdata_ce1;
reg[15:0] checkdata_we1;
reg[127:0] checkdata_d1;
reg hercules_buffer_size_ap_vld;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] global_time_1;
reg   [63:0] e_1_reg_310;
reg   [31:0] empty_14_reg_321;
reg   [63:0] cnt_1_reg_331;
wire   [63:0] add_ln44_fu_408_p2;
reg   [63:0] add_ln44_reg_709;
wire    ap_CS_fsm_state2;
wire   [31:0] data_in_assign_5_fu_422_p2;
reg   [31:0] data_in_assign_5_reg_715;
wire   [7:0] empty_fu_428_p2;
reg   [7:0] empty_reg_721;
wire   [8:0] n_1_fu_434_p2;
reg   [8:0] n_1_reg_726;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln47_fu_446_p1;
reg   [63:0] zext_ln47_reg_734;
wire   [0:0] icmp_ln47_fu_440_p2;
wire   [31:0] grp_fu_396_p2;
wire   [0:0] icmp_ln48_fu_498_p2;
reg   [0:0] icmp_ln48_reg_752;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_begin_fu_504_p1;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_end_fu_534_p4;
reg   [63:0] tmp_end_reg_766;
wire   [31:0] add_ln13_2_fu_576_p2;
wire   [0:0] icmp_ln84_fu_582_p2;
reg   [0:0] icmp_ln84_reg_777;
wire   [0:0] icmp_ln84_1_fu_588_p2;
reg   [0:0] icmp_ln84_1_reg_781;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] trunc_ln11_1_fu_598_p1;
reg   [31:0] trunc_ln11_1_reg_790;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state7_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] level_addr_2_reg_795;
wire   [63:0] e_2_fu_619_p2;
reg   [63:0] e_2_reg_800;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter1;
reg   [63:0] horizon_reg_253;
wire   [0:0] icmp_ln137_fu_478_p2;
reg   [31:0] p_lcssa42_reg_265;
wire   [31:0] ap_phi_mux_p_lcssa40_phi_fu_278_p4;
reg   [31:0] p_lcssa40_reg_275;
reg   [31:0] ap_phi_mux_p_lcssa41_phi_fu_369_p6;
wire    ap_CS_fsm_state9;
reg   [63:0] cnt_reg_286;
reg   [63:0] ap_phi_mux_cnt_3_phi_fu_384_p6;
reg   [8:0] n_reg_299;
reg   [63:0] ap_phi_mux_e_1_phi_fu_313_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_empty_15_phi_fu_346_p4;
reg   [63:0] ap_phi_mux_cnt_2_phi_fu_357_p4;
wire   [31:0] add_ln13_5_fu_692_p2;
wire   [31:0] ap_phi_reg_pp0_iter1_empty_15_reg_342;
wire   [0:0] icmp_ln110_fu_664_p2;
wire   [31:0] add_ln13_4_fu_657_p2;
wire   [63:0] cnt_4_fu_699_p2;
wire   [63:0] ap_phi_reg_pp0_iter1_cnt_2_reg_353;
reg   [31:0] p_lcssa41_reg_365;
reg   [63:0] cnt_3_reg_380;
wire   [63:0] zext_ln9_fu_451_p1;
wire   [63:0] zext_ln9_1_fu_508_p1;
wire   [63:0] zext_ln9_2_fu_544_p1;
wire   [63:0] zext_ln9_3_fu_593_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln9_4_fu_631_p1;
wire   [63:0] zext_ln9_5_fu_670_p1;
wire   [127:0] or_ln12_fu_471_p2;
wire   [127:0] or_ln12_1_fu_527_p2;
wire   [127:0] or_ln12_2_fu_569_p2;
wire   [127:0] or_ln12_3_fu_612_p2;
wire   [127:0] or_ln12_4_fu_650_p2;
wire   [127:0] or_ln12_5_fu_685_p2;
reg   [31:0] grp_fu_396_p0;
wire   [31:0] trunc_ln44_1_fu_418_p1;
wire   [7:0] trunc_ln44_fu_414_p1;
wire   [31:0] trunc_ln12_fu_456_p1;
wire   [127:0] tmp5_fu_460_p5;
wire  signed [31:0] sext_ln48_fu_490_p1;
wire   [63:0] zext_ln48_fu_494_p1;
wire   [31:0] trunc_ln11_fu_513_p1;
wire   [127:0] tmp2_fu_517_p4;
wire   [31:0] tmp_2_fu_549_p4;
wire   [127:0] tmp6_fu_559_p4;
wire   [127:0] tmp4_fu_602_p4;
wire   [31:0] add_ln13_3_fu_625_p2;
wire  signed [7:0] sext_ln11_fu_636_p0;
wire  signed [31:0] sext_ln11_fu_636_p1;
wire   [127:0] tmp7_fu_640_p4;
wire  signed [7:0] icmp_ln110_fu_664_p0;
wire   [127:0] tmp9_fu_675_p5;
reg   [7:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 global_time_1 = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln84_fu_582_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln84_fu_582_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln84_fu_582_p2 == 1'd1))) begin
        cnt_1_reg_331 <= cnt_reg_286;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_1_reg_781 == 1'd0))) begin
        cnt_1_reg_331 <= ap_phi_mux_cnt_2_phi_fu_357_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln84_reg_777 == 1'd1) & (icmp_ln48_reg_752 == 1'd1))) begin
        cnt_3_reg_380 <= cnt_1_reg_331;
    end else if ((((1'b1 == ap_CS_fsm_state5) & (icmp_ln84_fu_582_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln48_fu_498_p2 == 1'd0)))) begin
        cnt_3_reg_380 <= cnt_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        cnt_reg_286 <= ap_phi_mux_cnt_3_phi_fu_384_p6;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cnt_reg_286 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln84_fu_582_p2 == 1'd1))) begin
        e_1_reg_310 <= tmp_begin_fu_504_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_1_reg_781 == 1'd0))) begin
        e_1_reg_310 <= e_2_reg_800;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln84_fu_582_p2 == 1'd1))) begin
        empty_14_reg_321 <= add_ln13_2_fu_576_p2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_1_reg_781 == 1'd0))) begin
        empty_14_reg_321 <= ap_phi_mux_empty_15_phi_fu_346_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln137_fu_478_p2 == 1'd0) & (icmp_ln47_fu_440_p2 == 1'd1))) begin
        horizon_reg_253 <= add_ln44_reg_709;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        horizon_reg_253 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        n_reg_299 <= n_1_reg_726;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        n_reg_299 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_lcssa40_reg_275 <= ap_phi_mux_p_lcssa41_phi_fu_369_p6;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_lcssa40_reg_275 <= p_lcssa42_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln84_reg_777 == 1'd1) & (icmp_ln48_reg_752 == 1'd1))) begin
        p_lcssa41_reg_365 <= empty_14_reg_321;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln84_fu_582_p2 == 1'd0))) begin
        p_lcssa41_reg_365 <= add_ln13_2_fu_576_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln48_fu_498_p2 == 1'd0))) begin
        p_lcssa41_reg_365 <= p_lcssa40_reg_275;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln137_fu_478_p2 == 1'd0) & (icmp_ln47_fu_440_p2 == 1'd1))) begin
        p_lcssa42_reg_265 <= grp_fu_396_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_lcssa42_reg_265 <= global_time_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln44_reg_709 <= add_ln44_fu_408_p2;
        data_in_assign_5_reg_715 <= data_in_assign_5_fu_422_p2;
        empty_reg_721 <= empty_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln84_1_reg_781 == 1'd0))) begin
        e_2_reg_800 <= e_2_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln137_fu_478_p2 == 1'd1) & (icmp_ln47_fu_440_p2 == 1'd1))) begin
        global_time_1 <= grp_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln48_reg_752 <= icmp_ln48_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln84_1_reg_781 <= icmp_ln84_1_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln84_reg_777 <= icmp_ln84_fu_582_p2;
        tmp_end_reg_766 <= {{nodes_q0[127:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln84_1_reg_781 == 1'd0))) begin
        level_addr_2_reg_795 <= edges_q0;
        trunc_ln11_1_reg_790 <= trunc_ln11_1_fu_598_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        n_1_reg_726 <= n_1_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln47_fu_440_p2 == 1'd0))) begin
        zext_ln47_reg_734[8 : 0] <= zext_ln47_fu_446_p1[8 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln84_1_reg_781 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln137_fu_478_p2 == 1'd1) & (icmp_ln47_fu_440_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln84_1_reg_781 == 1'd0)) begin
        if ((icmp_ln110_fu_664_p2 == 1'd0)) begin
            ap_phi_mux_cnt_2_phi_fu_357_p4 = cnt_1_reg_331;
        end else if ((icmp_ln110_fu_664_p2 == 1'd1)) begin
            ap_phi_mux_cnt_2_phi_fu_357_p4 = cnt_4_fu_699_p2;
        end else begin
            ap_phi_mux_cnt_2_phi_fu_357_p4 = ap_phi_reg_pp0_iter1_cnt_2_reg_353;
        end
    end else begin
        ap_phi_mux_cnt_2_phi_fu_357_p4 = ap_phi_reg_pp0_iter1_cnt_2_reg_353;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln84_reg_777 == 1'd1) & (icmp_ln48_reg_752 == 1'd1))) begin
        ap_phi_mux_cnt_3_phi_fu_384_p6 = cnt_1_reg_331;
    end else begin
        ap_phi_mux_cnt_3_phi_fu_384_p6 = cnt_3_reg_380;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln84_1_reg_781 == 1'd0))) begin
        ap_phi_mux_e_1_phi_fu_313_p4 = e_2_reg_800;
    end else begin
        ap_phi_mux_e_1_phi_fu_313_p4 = e_1_reg_310;
    end
end

always @ (*) begin
    if ((icmp_ln84_1_reg_781 == 1'd0)) begin
        if ((icmp_ln110_fu_664_p2 == 1'd0)) begin
            ap_phi_mux_empty_15_phi_fu_346_p4 = add_ln13_4_fu_657_p2;
        end else if ((icmp_ln110_fu_664_p2 == 1'd1)) begin
            ap_phi_mux_empty_15_phi_fu_346_p4 = add_ln13_5_fu_692_p2;
        end else begin
            ap_phi_mux_empty_15_phi_fu_346_p4 = ap_phi_reg_pp0_iter1_empty_15_reg_342;
        end
    end else begin
        ap_phi_mux_empty_15_phi_fu_346_p4 = ap_phi_reg_pp0_iter1_empty_15_reg_342;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln84_reg_777 == 1'd1) & (icmp_ln48_reg_752 == 1'd1))) begin
        ap_phi_mux_p_lcssa41_phi_fu_369_p6 = empty_14_reg_321;
    end else begin
        ap_phi_mux_p_lcssa41_phi_fu_369_p6 = p_lcssa41_reg_365;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln137_fu_478_p2 == 1'd1) & (icmp_ln47_fu_440_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        checkdata_address0 = zext_ln9_4_fu_631_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        checkdata_address0 = zext_ln9_2_fu_544_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        checkdata_address0 = zext_ln9_fu_451_p1;
    end else begin
        checkdata_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        checkdata_address1 = zext_ln9_5_fu_670_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        checkdata_address1 = zext_ln9_3_fu_593_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        checkdata_address1 = zext_ln9_1_fu_508_p1;
    end else begin
        checkdata_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        checkdata_ce0 = 1'b1;
    end else begin
        checkdata_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        checkdata_ce1 = 1'b1;
    end else begin
        checkdata_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        checkdata_d0 = or_ln12_4_fu_650_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        checkdata_d0 = or_ln12_2_fu_569_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        checkdata_d0 = or_ln12_fu_471_p2;
    end else begin
        checkdata_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        checkdata_d1 = or_ln12_5_fu_685_p2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        checkdata_d1 = or_ln12_3_fu_612_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        checkdata_d1 = or_ln12_1_fu_527_p2;
    end else begin
        checkdata_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln47_fu_440_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_1_reg_781 == 1'd0)))) begin
        checkdata_we0 = 16'd65535;
    end else begin
        checkdata_we0 = 16'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln110_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_1_reg_781 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln84_1_reg_781 == 1'd0)))) begin
        checkdata_we1 = 16'd65535;
    end else begin
        checkdata_we1 = 16'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        edges_ce0 = 1'b1;
    end else begin
        edges_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_396_p0 = p_lcssa40_reg_275;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_396_p0 = ap_phi_mux_p_lcssa40_phi_fu_278_p4;
    end else begin
        grp_fu_396_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln137_fu_478_p2 == 1'd1) & (icmp_ln47_fu_440_p2 == 1'd1))) begin
        hercules_buffer_size_ap_vld = 1'b1;
    end else begin
        hercules_buffer_size_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        level_address0 = level_addr_2_reg_795;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        level_address0 = edges_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        level_address0 = zext_ln47_fu_446_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        level_address0 = starting_node;
    end else begin
        level_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        level_ce0 = 1'b1;
    end else begin
        level_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        level_counts_address0 = add_ln44_reg_709;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        level_counts_address0 = 64'd0;
    end else begin
        level_counts_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        level_counts_ce0 = 1'b1;
    end else begin
        level_counts_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        level_counts_d0 = cnt_reg_286;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        level_counts_d0 = 64'd1;
    end else begin
        level_counts_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln47_fu_440_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        level_counts_we0 = 1'b1;
    end else begin
        level_counts_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        level_d0 = empty_reg_721;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        level_d0 = 8'd0;
    end else begin
        level_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln110_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln84_1_reg_781 == 1'd0)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        level_we0 = 1'b1;
    end else begin
        level_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        nodes_ce0 = 1'b1;
    end else begin
        nodes_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln137_fu_478_p2 == 1'd1) & (icmp_ln47_fu_440_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln137_fu_478_p2 == 1'd0) & (icmp_ln47_fu_440_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln48_fu_498_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln84_fu_582_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln84_1_reg_781 == 1'd1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln84_1_reg_781 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_2_fu_576_p2 = (p_lcssa40_reg_275 + 32'd2);

assign add_ln13_3_fu_625_p2 = (empty_14_reg_321 + 32'd1);

assign add_ln13_4_fu_657_p2 = (empty_14_reg_321 + 32'd2);

assign add_ln13_5_fu_692_p2 = (empty_14_reg_321 + 32'd3);

assign add_ln44_fu_408_p2 = (horizon_reg_253 + 64'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_p_lcssa40_phi_fu_278_p4 = p_lcssa40_reg_275;

assign ap_phi_reg_pp0_iter1_cnt_2_reg_353 = 'bx;

assign ap_phi_reg_pp0_iter1_empty_15_reg_342 = 'bx;

assign cnt_4_fu_699_p2 = (cnt_1_reg_331 + 64'd1);

assign data_in_assign_5_fu_422_p2 = (trunc_ln44_1_fu_418_p1 + 32'd1);

assign e_2_fu_619_p2 = (e_1_reg_310 + 64'd1);

assign edges_address0 = ap_phi_mux_e_1_phi_fu_313_p4;

assign empty_fu_428_p2 = (trunc_ln44_fu_414_p1 + 8'd1);

assign grp_fu_396_p2 = (grp_fu_396_p0 + 32'd1);

assign hercules_buffer_size = grp_fu_396_p2;

assign icmp_ln110_fu_664_p0 = level_q0;

assign icmp_ln110_fu_664_p2 = ((icmp_ln110_fu_664_p0 == 8'd127) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_478_p2 = ((cnt_reg_286 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_440_p2 = ((n_reg_299 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_498_p2 = ((zext_ln48_fu_494_p1 == horizon_reg_253) ? 1'b1 : 1'b0);

assign icmp_ln84_1_fu_588_p2 = ((ap_phi_mux_e_1_phi_fu_313_p4 == tmp_end_reg_766) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_582_p2 = ((tmp_begin_fu_504_p1 < tmp_end_fu_534_p4) ? 1'b1 : 1'b0);

assign n_1_fu_434_p2 = (n_reg_299 + 9'd1);

assign nodes_address0 = zext_ln47_reg_734;

assign or_ln12_1_fu_527_p2 = (tmp2_fu_517_p4 | 128'd8);

assign or_ln12_2_fu_569_p2 = (tmp6_fu_559_p4 | 128'd9);

assign or_ln12_3_fu_612_p2 = (tmp4_fu_602_p4 | 128'd11);

assign or_ln12_4_fu_650_p2 = (tmp7_fu_640_p4 | 128'd10);

assign or_ln12_5_fu_685_p2 = (tmp9_fu_675_p5 | 128'd12);

assign or_ln12_fu_471_p2 = (tmp5_fu_460_p5 | 128'd13);

assign sext_ln11_fu_636_p0 = level_q0;

assign sext_ln11_fu_636_p1 = sext_ln11_fu_636_p0;

assign sext_ln48_fu_490_p1 = $signed(level_q0);

assign tmp2_fu_517_p4 = {{{p_lcssa40_reg_275}, {trunc_ln11_fu_513_p1}}, {64'd0}};

assign tmp4_fu_602_p4 = {{{empty_14_reg_321}, {trunc_ln11_1_fu_598_p1}}, {64'd0}};

assign tmp5_fu_460_p5 = {{{{p_lcssa40_reg_275}, {trunc_ln12_fu_456_p1}}, {data_in_assign_5_reg_715}}, {32'd0}};

assign tmp6_fu_559_p4 = {{{grp_fu_396_p2}, {tmp_2_fu_549_p4}}, {64'd0}};

assign tmp7_fu_640_p4 = {{{add_ln13_3_fu_625_p2}, {sext_ln11_fu_636_p1}}, {64'd0}};

assign tmp9_fu_675_p5 = {{{{add_ln13_4_fu_657_p2}, {data_in_assign_5_reg_715}}, {trunc_ln11_1_reg_790}}, {32'd0}};

assign tmp_2_fu_549_p4 = {{nodes_q0[95:64]}};

assign tmp_begin_fu_504_p1 = nodes_q0[63:0];

assign tmp_end_fu_534_p4 = {{nodes_q0[127:64]}};

assign trunc_ln11_1_fu_598_p1 = edges_q0[31:0];

assign trunc_ln11_fu_513_p1 = nodes_q0[31:0];

assign trunc_ln12_fu_456_p1 = cnt_reg_286[31:0];

assign trunc_ln44_1_fu_418_p1 = horizon_reg_253[31:0];

assign trunc_ln44_fu_414_p1 = horizon_reg_253[7:0];

assign zext_ln47_fu_446_p1 = n_reg_299;

assign zext_ln48_fu_494_p1 = $unsigned(sext_ln48_fu_490_p1);

assign zext_ln9_1_fu_508_p1 = p_lcssa40_reg_275;

assign zext_ln9_2_fu_544_p1 = grp_fu_396_p2;

assign zext_ln9_3_fu_593_p1 = empty_14_reg_321;

assign zext_ln9_4_fu_631_p1 = add_ln13_3_fu_625_p2;

assign zext_ln9_5_fu_670_p1 = add_ln13_4_fu_657_p2;

assign zext_ln9_fu_451_p1 = p_lcssa40_reg_275;

always @ (posedge ap_clk) begin
    zext_ln47_reg_734[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //bfs
