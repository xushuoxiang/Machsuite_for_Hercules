-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bfs is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nodes_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    nodes_ce0 : OUT STD_LOGIC;
    nodes_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    edges_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    edges_ce0 : OUT STD_LOGIC;
    edges_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    starting_node : IN STD_LOGIC_VECTOR (63 downto 0);
    level_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    level_ce0 : OUT STD_LOGIC;
    level_we0 : OUT STD_LOGIC;
    level_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    level_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    level_counts_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    level_counts_ce0 : OUT STD_LOGIC;
    level_counts_we0 : OUT STD_LOGIC;
    level_counts_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    checkdata_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    checkdata_ce0 : OUT STD_LOGIC;
    checkdata_we0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    checkdata_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    checkdata_address1 : OUT STD_LOGIC_VECTOR (20 downto 0);
    checkdata_ce1 : OUT STD_LOGIC;
    checkdata_we1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    checkdata_d1 : OUT STD_LOGIC_VECTOR (127 downto 0);
    hercules_buffer_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    hercules_buffer_size_ap_vld : OUT STD_LOGIC );
end;


architecture behav of bfs is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bfs_bfs,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.323000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=792,HLS_SYN_LUT=1781,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv128_lc_4 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv128_lc_5 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_6 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal global_time_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal e_1_reg_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_14_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt_1_reg_331 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln44_fu_408_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln44_reg_709 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal data_in_assign_5_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_assign_5_reg_715 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_721 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_1_fu_434_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_1_reg_726 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln47_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_reg_734 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln47_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_reg_752 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_begin_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_end_fu_534_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_end_reg_766 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_2_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln84_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_1_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_1_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln11_1_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln11_1_reg_790 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state7_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal level_addr_2_reg_795 : STD_LOGIC_VECTOR (7 downto 0);
    signal e_2_fu_619_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_2_reg_800 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal horizon_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln137_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_lcssa42_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_lcssa40_phi_fu_278_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lcssa40_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_lcssa41_phi_fu_369_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal cnt_reg_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_cnt_3_phi_fu_384_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_reg_299 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_e_1_phi_fu_313_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_empty_15_phi_fu_346_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_cnt_2_phi_fu_357_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_5_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_15_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln110_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_4_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt_4_fu_699_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_cnt_2_reg_353 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_lcssa41_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt_3_reg_380 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_1_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_2_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_3_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln9_4_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_5_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln12_fu_471_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln12_1_fu_527_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln12_2_fu_569_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln12_3_fu_612_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln12_4_fu_650_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln12_5_fu_685_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln44_1_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln44_fu_414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln12_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_460_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln48_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln48_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln11_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_517_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_2_fu_549_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_559_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp4_fu_602_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln13_3_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln11_fu_636_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln11_fu_636_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_640_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln110_fu_664_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp9_fu_675_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln84_fu_582_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln84_fu_582_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cnt_1_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln84_fu_582_p2 = ap_const_lv1_1))) then 
                cnt_1_reg_331 <= cnt_reg_286;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln84_1_reg_781 = ap_const_lv1_0))) then 
                cnt_1_reg_331 <= ap_phi_mux_cnt_2_phi_fu_357_p4;
            end if; 
        end if;
    end process;

    cnt_3_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln84_reg_777 = ap_const_lv1_1) and (icmp_ln48_reg_752 = ap_const_lv1_1))) then 
                cnt_3_reg_380 <= cnt_1_reg_331;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln84_fu_582_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln48_fu_498_p2 = ap_const_lv1_0)))) then 
                cnt_3_reg_380 <= cnt_reg_286;
            end if; 
        end if;
    end process;

    cnt_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                cnt_reg_286 <= ap_phi_mux_cnt_3_phi_fu_384_p6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                cnt_reg_286 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    e_1_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln84_fu_582_p2 = ap_const_lv1_1))) then 
                e_1_reg_310 <= tmp_begin_fu_504_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln84_1_reg_781 = ap_const_lv1_0))) then 
                e_1_reg_310 <= e_2_reg_800;
            end if; 
        end if;
    end process;

    empty_14_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln84_fu_582_p2 = ap_const_lv1_1))) then 
                empty_14_reg_321 <= add_ln13_2_fu_576_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln84_1_reg_781 = ap_const_lv1_0))) then 
                empty_14_reg_321 <= ap_phi_mux_empty_15_phi_fu_346_p4;
            end if; 
        end if;
    end process;

    horizon_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln137_fu_478_p2 = ap_const_lv1_0) and (icmp_ln47_fu_440_p2 = ap_const_lv1_1))) then 
                horizon_reg_253 <= add_ln44_reg_709;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                horizon_reg_253 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    n_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                n_reg_299 <= n_1_reg_726;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                n_reg_299 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_lcssa40_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_lcssa40_reg_275 <= ap_phi_mux_p_lcssa41_phi_fu_369_p6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_lcssa40_reg_275 <= p_lcssa42_reg_265;
            end if; 
        end if;
    end process;

    p_lcssa41_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln84_reg_777 = ap_const_lv1_1) and (icmp_ln48_reg_752 = ap_const_lv1_1))) then 
                p_lcssa41_reg_365 <= empty_14_reg_321;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln84_fu_582_p2 = ap_const_lv1_0))) then 
                p_lcssa41_reg_365 <= add_ln13_2_fu_576_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln48_fu_498_p2 = ap_const_lv1_0))) then 
                p_lcssa41_reg_365 <= p_lcssa40_reg_275;
            end if; 
        end if;
    end process;

    p_lcssa42_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln137_fu_478_p2 = ap_const_lv1_0) and (icmp_ln47_fu_440_p2 = ap_const_lv1_1))) then 
                p_lcssa42_reg_265 <= grp_fu_396_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_lcssa42_reg_265 <= global_time_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln44_reg_709 <= add_ln44_fu_408_p2;
                data_in_assign_5_reg_715 <= data_in_assign_5_fu_422_p2;
                empty_reg_721 <= empty_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln84_1_reg_781 = ap_const_lv1_0))) then
                e_2_reg_800 <= e_2_fu_619_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln137_fu_478_p2 = ap_const_lv1_1) and (icmp_ln47_fu_440_p2 = ap_const_lv1_1))) then
                global_time_1 <= grp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln48_reg_752 <= icmp_ln48_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln84_1_reg_781 <= icmp_ln84_1_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln84_reg_777 <= icmp_ln84_fu_582_p2;
                tmp_end_reg_766 <= nodes_q0(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln84_1_reg_781 = ap_const_lv1_0))) then
                level_addr_2_reg_795 <= edges_q0(8 - 1 downto 0);
                trunc_ln11_1_reg_790 <= trunc_ln11_1_fu_598_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                n_1_reg_726 <= n_1_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln47_fu_440_p2 = ap_const_lv1_0))) then
                    zext_ln47_reg_734(8 downto 0) <= zext_ln47_fu_446_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln47_reg_734(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln47_fu_440_p2, icmp_ln48_fu_498_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln84_fu_582_p2, icmp_ln84_1_reg_781, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_subdone, icmp_ln137_fu_478_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln137_fu_478_p2 = ap_const_lv1_1) and (icmp_ln47_fu_440_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln137_fu_478_p2 = ap_const_lv1_0) and (icmp_ln47_fu_440_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln48_fu_498_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln84_fu_582_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln84_1_reg_781 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln84_1_reg_781 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln13_2_fu_576_p2 <= std_logic_vector(unsigned(p_lcssa40_reg_275) + unsigned(ap_const_lv32_2));
    add_ln13_3_fu_625_p2 <= std_logic_vector(unsigned(empty_14_reg_321) + unsigned(ap_const_lv32_1));
    add_ln13_4_fu_657_p2 <= std_logic_vector(unsigned(empty_14_reg_321) + unsigned(ap_const_lv32_2));
    add_ln13_5_fu_692_p2 <= std_logic_vector(unsigned(empty_14_reg_321) + unsigned(ap_const_lv32_3));
    add_ln44_fu_408_p2 <= std_logic_vector(unsigned(horizon_reg_253) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln84_1_reg_781)
    begin
        if ((icmp_ln84_1_reg_781 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln47_fu_440_p2, icmp_ln137_fu_478_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln137_fu_478_p2 = ap_const_lv1_1) and (icmp_ln47_fu_440_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cnt_2_phi_fu_357_p4_assign_proc : process(cnt_1_reg_331, icmp_ln84_1_reg_781, icmp_ln110_fu_664_p2, cnt_4_fu_699_p2, ap_phi_reg_pp0_iter1_cnt_2_reg_353)
    begin
        if ((icmp_ln84_1_reg_781 = ap_const_lv1_0)) then
            if ((icmp_ln110_fu_664_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_cnt_2_phi_fu_357_p4 <= cnt_1_reg_331;
            elsif ((icmp_ln110_fu_664_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_cnt_2_phi_fu_357_p4 <= cnt_4_fu_699_p2;
            else 
                ap_phi_mux_cnt_2_phi_fu_357_p4 <= ap_phi_reg_pp0_iter1_cnt_2_reg_353;
            end if;
        else 
            ap_phi_mux_cnt_2_phi_fu_357_p4 <= ap_phi_reg_pp0_iter1_cnt_2_reg_353;
        end if; 
    end process;


    ap_phi_mux_cnt_3_phi_fu_384_p6_assign_proc : process(cnt_1_reg_331, icmp_ln48_reg_752, icmp_ln84_reg_777, ap_CS_fsm_state9, cnt_3_reg_380)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln84_reg_777 = ap_const_lv1_1) and (icmp_ln48_reg_752 = ap_const_lv1_1))) then 
            ap_phi_mux_cnt_3_phi_fu_384_p6 <= cnt_1_reg_331;
        else 
            ap_phi_mux_cnt_3_phi_fu_384_p6 <= cnt_3_reg_380;
        end if; 
    end process;


    ap_phi_mux_e_1_phi_fu_313_p4_assign_proc : process(e_1_reg_310, icmp_ln84_1_reg_781, ap_CS_fsm_pp0_stage0, e_2_reg_800, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln84_1_reg_781 = ap_const_lv1_0))) then 
            ap_phi_mux_e_1_phi_fu_313_p4 <= e_2_reg_800;
        else 
            ap_phi_mux_e_1_phi_fu_313_p4 <= e_1_reg_310;
        end if; 
    end process;


    ap_phi_mux_empty_15_phi_fu_346_p4_assign_proc : process(icmp_ln84_1_reg_781, add_ln13_5_fu_692_p2, ap_phi_reg_pp0_iter1_empty_15_reg_342, icmp_ln110_fu_664_p2, add_ln13_4_fu_657_p2)
    begin
        if ((icmp_ln84_1_reg_781 = ap_const_lv1_0)) then
            if ((icmp_ln110_fu_664_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_empty_15_phi_fu_346_p4 <= add_ln13_4_fu_657_p2;
            elsif ((icmp_ln110_fu_664_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_empty_15_phi_fu_346_p4 <= add_ln13_5_fu_692_p2;
            else 
                ap_phi_mux_empty_15_phi_fu_346_p4 <= ap_phi_reg_pp0_iter1_empty_15_reg_342;
            end if;
        else 
            ap_phi_mux_empty_15_phi_fu_346_p4 <= ap_phi_reg_pp0_iter1_empty_15_reg_342;
        end if; 
    end process;

    ap_phi_mux_p_lcssa40_phi_fu_278_p4 <= p_lcssa40_reg_275;

    ap_phi_mux_p_lcssa41_phi_fu_369_p6_assign_proc : process(empty_14_reg_321, icmp_ln48_reg_752, icmp_ln84_reg_777, ap_CS_fsm_state9, p_lcssa41_reg_365)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln84_reg_777 = ap_const_lv1_1) and (icmp_ln48_reg_752 = ap_const_lv1_1))) then 
            ap_phi_mux_p_lcssa41_phi_fu_369_p6 <= empty_14_reg_321;
        else 
            ap_phi_mux_p_lcssa41_phi_fu_369_p6 <= p_lcssa41_reg_365;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_cnt_2_reg_353 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_empty_15_reg_342 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln47_fu_440_p2, icmp_ln137_fu_478_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln137_fu_478_p2 = ap_const_lv1_1) and (icmp_ln47_fu_440_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    checkdata_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln9_fu_451_p1, zext_ln9_2_fu_544_p1, zext_ln9_4_fu_631_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            checkdata_address0 <= zext_ln9_4_fu_631_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            checkdata_address0 <= zext_ln9_2_fu_544_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            checkdata_address0 <= zext_ln9_fu_451_p1(21 - 1 downto 0);
        else 
            checkdata_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    checkdata_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln9_1_fu_508_p1, zext_ln9_3_fu_593_p1, ap_block_pp0_stage1, zext_ln9_5_fu_670_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            checkdata_address1 <= zext_ln9_5_fu_670_p1(21 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            checkdata_address1 <= zext_ln9_3_fu_593_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            checkdata_address1 <= zext_ln9_1_fu_508_p1(21 - 1 downto 0);
        else 
            checkdata_address1 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    checkdata_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            checkdata_ce0 <= ap_const_logic_1;
        else 
            checkdata_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    checkdata_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            checkdata_ce1 <= ap_const_logic_1;
        else 
            checkdata_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    checkdata_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, or_ln12_fu_471_p2, or_ln12_2_fu_569_p2, or_ln12_4_fu_650_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            checkdata_d0 <= or_ln12_4_fu_650_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            checkdata_d0 <= or_ln12_2_fu_569_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            checkdata_d0 <= or_ln12_fu_471_p2;
        else 
            checkdata_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    checkdata_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, or_ln12_1_fu_527_p2, or_ln12_3_fu_612_p2, or_ln12_5_fu_685_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            checkdata_d1 <= or_ln12_5_fu_685_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            checkdata_d1 <= or_ln12_3_fu_612_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            checkdata_d1 <= or_ln12_1_fu_527_p2;
        else 
            checkdata_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    checkdata_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln47_fu_440_p2, ap_CS_fsm_state5, icmp_ln84_1_reg_781, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln47_fu_440_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln84_1_reg_781 = ap_const_lv1_0)))) then 
            checkdata_we0 <= ap_const_lv16_FFFF;
        else 
            checkdata_we0 <= ap_const_lv16_0;
        end if; 
    end process;


    checkdata_we1_assign_proc : process(ap_CS_fsm_state5, icmp_ln84_1_reg_781, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln110_fu_664_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln110_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln84_1_reg_781 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln84_1_reg_781 = ap_const_lv1_0)))) then 
            checkdata_we1 <= ap_const_lv16_FFFF;
        else 
            checkdata_we1 <= ap_const_lv16_0;
        end if; 
    end process;

    cnt_4_fu_699_p2 <= std_logic_vector(unsigned(cnt_1_reg_331) + unsigned(ap_const_lv64_1));
    data_in_assign_5_fu_422_p2 <= std_logic_vector(unsigned(trunc_ln44_1_fu_418_p1) + unsigned(ap_const_lv32_1));
    e_2_fu_619_p2 <= std_logic_vector(unsigned(e_1_reg_310) + unsigned(ap_const_lv64_1));
    edges_address0 <= ap_phi_mux_e_1_phi_fu_313_p4(12 - 1 downto 0);

    edges_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            edges_ce0 <= ap_const_logic_1;
        else 
            edges_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_428_p2 <= std_logic_vector(unsigned(trunc_ln44_fu_414_p1) + unsigned(ap_const_lv8_1));

    grp_fu_396_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_phi_mux_p_lcssa40_phi_fu_278_p4, p_lcssa40_reg_275)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_396_p0 <= p_lcssa40_reg_275;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_396_p0 <= ap_phi_mux_p_lcssa40_phi_fu_278_p4;
        else 
            grp_fu_396_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_396_p2 <= std_logic_vector(unsigned(grp_fu_396_p0) + unsigned(ap_const_lv32_1));
    hercules_buffer_size <= grp_fu_396_p2;

    hercules_buffer_size_ap_vld_assign_proc : process(ap_CS_fsm_state3, icmp_ln47_fu_440_p2, icmp_ln137_fu_478_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln137_fu_478_p2 = ap_const_lv1_1) and (icmp_ln47_fu_440_p2 = ap_const_lv1_1))) then 
            hercules_buffer_size_ap_vld <= ap_const_logic_1;
        else 
            hercules_buffer_size_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln110_fu_664_p0 <= level_q0;
    icmp_ln110_fu_664_p2 <= "1" when (icmp_ln110_fu_664_p0 = ap_const_lv8_7F) else "0";
    icmp_ln137_fu_478_p2 <= "1" when (cnt_reg_286 = ap_const_lv64_0) else "0";
    icmp_ln47_fu_440_p2 <= "1" when (n_reg_299 = ap_const_lv9_100) else "0";
    icmp_ln48_fu_498_p2 <= "1" when (zext_ln48_fu_494_p1 = horizon_reg_253) else "0";
    icmp_ln84_1_fu_588_p2 <= "1" when (ap_phi_mux_e_1_phi_fu_313_p4 = tmp_end_reg_766) else "0";
    icmp_ln84_fu_582_p2 <= "1" when (unsigned(tmp_begin_fu_504_p1) < unsigned(tmp_end_fu_534_p4)) else "0";

    level_address0_assign_proc : process(ap_CS_fsm_state1, edges_q0, starting_node, ap_CS_fsm_state3, zext_ln47_fu_446_p1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, level_addr_2_reg_795, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            level_address0 <= level_addr_2_reg_795;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            level_address0 <= edges_q0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            level_address0 <= zext_ln47_fu_446_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_address0 <= starting_node(8 - 1 downto 0);
        else 
            level_address0 <= "XXXXXXXX";
        end if; 
    end process;


    level_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            level_ce0 <= ap_const_logic_1;
        else 
            level_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    level_counts_address0_assign_proc : process(ap_CS_fsm_state1, add_ln44_reg_709, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            level_counts_address0 <= add_ln44_reg_709(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_counts_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            level_counts_address0 <= "XXXX";
        end if; 
    end process;


    level_counts_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            level_counts_ce0 <= ap_const_logic_1;
        else 
            level_counts_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    level_counts_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, cnt_reg_286)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            level_counts_d0 <= cnt_reg_286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_counts_d0 <= ap_const_lv64_1;
        else 
            level_counts_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    level_counts_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln47_fu_440_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln47_fu_440_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            level_counts_we0 <= ap_const_logic_1;
        else 
            level_counts_we0 <= ap_const_logic_0;
        end if; 
    end process;


    level_d0_assign_proc : process(ap_CS_fsm_state1, empty_reg_721, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            level_d0 <= empty_reg_721;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_d0 <= ap_const_lv8_0;
        else 
            level_d0 <= "XXXXXXXX";
        end if; 
    end process;


    level_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln84_1_reg_781, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, icmp_ln110_fu_664_p2)
    begin
        if ((((icmp_ln110_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln84_1_reg_781 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            level_we0 <= ap_const_logic_1;
        else 
            level_we0 <= ap_const_logic_0;
        end if; 
    end process;

    n_1_fu_434_p2 <= std_logic_vector(unsigned(n_reg_299) + unsigned(ap_const_lv9_1));
    nodes_address0 <= zext_ln47_reg_734(8 - 1 downto 0);

    nodes_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            nodes_ce0 <= ap_const_logic_1;
        else 
            nodes_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln12_1_fu_527_p2 <= (tmp2_fu_517_p4 or ap_const_lv128_lc_2);
    or_ln12_2_fu_569_p2 <= (tmp6_fu_559_p4 or ap_const_lv128_lc_3);
    or_ln12_3_fu_612_p2 <= (tmp4_fu_602_p4 or ap_const_lv128_lc_4);
    or_ln12_4_fu_650_p2 <= (tmp7_fu_640_p4 or ap_const_lv128_lc_5);
    or_ln12_5_fu_685_p2 <= (tmp9_fu_675_p5 or ap_const_lv128_lc_6);
    or_ln12_fu_471_p2 <= (tmp5_fu_460_p5 or ap_const_lv128_lc_1);
    sext_ln11_fu_636_p0 <= level_q0;
        sext_ln11_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln11_fu_636_p0),32));

        sext_ln48_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(level_q0),32));

    tmp2_fu_517_p4 <= ((p_lcssa40_reg_275 & trunc_ln11_fu_513_p1) & ap_const_lv64_0);
    tmp4_fu_602_p4 <= ((empty_14_reg_321 & trunc_ln11_1_fu_598_p1) & ap_const_lv64_0);
    tmp5_fu_460_p5 <= (((p_lcssa40_reg_275 & trunc_ln12_fu_456_p1) & data_in_assign_5_reg_715) & ap_const_lv32_0);
    tmp6_fu_559_p4 <= ((grp_fu_396_p2 & tmp_2_fu_549_p4) & ap_const_lv64_0);
    tmp7_fu_640_p4 <= ((add_ln13_3_fu_625_p2 & sext_ln11_fu_636_p1) & ap_const_lv64_0);
    tmp9_fu_675_p5 <= (((add_ln13_4_fu_657_p2 & data_in_assign_5_reg_715) & trunc_ln11_1_reg_790) & ap_const_lv32_0);
    tmp_2_fu_549_p4 <= nodes_q0(95 downto 64);
    tmp_begin_fu_504_p1 <= nodes_q0(64 - 1 downto 0);
    tmp_end_fu_534_p4 <= nodes_q0(127 downto 64);
    trunc_ln11_1_fu_598_p1 <= edges_q0(32 - 1 downto 0);
    trunc_ln11_fu_513_p1 <= nodes_q0(32 - 1 downto 0);
    trunc_ln12_fu_456_p1 <= cnt_reg_286(32 - 1 downto 0);
    trunc_ln44_1_fu_418_p1 <= horizon_reg_253(32 - 1 downto 0);
    trunc_ln44_fu_414_p1 <= horizon_reg_253(8 - 1 downto 0);
    zext_ln47_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_299),64));
    zext_ln48_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln48_fu_490_p1),64));
    zext_ln9_1_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lcssa40_reg_275),64));
    zext_ln9_2_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_396_p2),64));
    zext_ln9_3_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_14_reg_321),64));
    zext_ln9_4_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_3_fu_625_p2),64));
    zext_ln9_5_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_4_fu_657_p2),64));
    zext_ln9_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lcssa40_reg_275),64));
end behav;
