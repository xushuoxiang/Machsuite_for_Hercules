-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bfs is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nodes_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    nodes_ce0 : OUT STD_LOGIC;
    nodes_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    nodes_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    nodes_ce1 : OUT STD_LOGIC;
    nodes_q1 : IN STD_LOGIC_VECTOR (127 downto 0);
    edges_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    edges_ce0 : OUT STD_LOGIC;
    edges_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    starting_node : IN STD_LOGIC_VECTOR (63 downto 0);
    level_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    level_ce0 : OUT STD_LOGIC;
    level_we0 : OUT STD_LOGIC;
    level_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    level_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    level_counts_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    level_counts_ce0 : OUT STD_LOGIC;
    level_counts_we0 : OUT STD_LOGIC;
    level_counts_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    level_counts_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    checkdata_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    checkdata_ce0 : OUT STD_LOGIC;
    checkdata_we0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    checkdata_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    checkdata_address1 : OUT STD_LOGIC_VECTOR (20 downto 0);
    checkdata_ce1 : OUT STD_LOGIC;
    checkdata_we1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    checkdata_d1 : OUT STD_LOGIC_VECTOR (127 downto 0);
    hercules_buffer_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    hercules_buffer_size_ap_vld : OUT STD_LOGIC );
end;


architecture behav of bfs is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bfs_bfs,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.418000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=500,HLS_SYN_LUT=1609,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv128_lc_4 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv128_lc_5 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal global_time_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal e_1_reg_325 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_14_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal dummy_1_fu_389_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal dummy_1_reg_752 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_381_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_1_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln58_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_out_1_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_out_1_reg_771 : STD_LOGIC_VECTOR (7 downto 0);
    signal queue_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_776 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln40_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_reg_781 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln13_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_begin_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_end_fu_495_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_end_reg_806 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln88_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal level_addr_1_reg_815 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln88_1_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln88_1_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln88_1_reg_820_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln89_fu_516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln89_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state6_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal level_addr_2_reg_836 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln101_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state7_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal e_2_fu_617_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_2_reg_845 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln13_2_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_level_1_fu_629_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_level_1_reg_855 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_3_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln13_3_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal level_counts_addr_1_reg_866 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln13_4_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal queue_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal queue_ce0 : STD_LOGIC;
    signal queue_we0 : STD_LOGIC;
    signal queue_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dummy_reg_303 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal q_out_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_e_1_phi_fu_328_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_empty_15_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_15_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln57_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln87_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln9_1_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln9_2_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_3_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln117_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_4_fu_714_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal q_in_fu_118 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln117_fu_701_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln12_fu_472_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln12_2_fu_570_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln12_3_fu_670_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln12_4_fu_729_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_3_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln57_1_fu_400_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln58_fu_422_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln58_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln87_fu_449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_463_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp6_fu_529_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln13_1_fu_545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln11_fu_556_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln11_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_560_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln101_fu_577_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln88_fu_520_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln123_fu_583_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln123_fu_589_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_in_1_fu_602_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_641_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_fu_649_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp3_fu_657_p6 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln117_fu_697_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln120_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln11_1_fu_694_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_718_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bfs_queue IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    queue_U : component bfs_queue
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => queue_address0,
        ce0 => queue_ce0,
        we0 => queue_we0,
        d0 => queue_d0,
        q0 => queue_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln88_fu_505_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln88_fu_505_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_empty_15_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln101_reg_841 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_empty_15_reg_346 <= add_ln13_2_fu_623_p2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln101_reg_841 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0))) then 
                ap_phi_reg_pp0_iter1_empty_15_reg_346 <= add_ln13_4_fu_688_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ap_phi_reg_pp0_iter1_empty_15_reg_346 <= ap_phi_reg_pp0_iter0_empty_15_reg_346;
            end if; 
        end if;
    end process;

    dummy_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                dummy_reg_303 <= dummy_1_reg_752;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                dummy_reg_303 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    e_1_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln88_fu_505_p2 = ap_const_lv1_1))) then 
                e_1_reg_325 <= tmp_begin_fu_491_p1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0))) then 
                e_1_reg_325 <= e_2_reg_845;
            end if; 
        end if;
    end process;

    empty_14_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln88_fu_505_p2 = ap_const_lv1_1))) then 
                empty_14_reg_336 <= add_ln13_fu_479_p2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln88_1_reg_820_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                empty_14_reg_336 <= ap_phi_reg_pp0_iter1_empty_15_reg_346;
            end if; 
        end if;
    end process;

    global_time_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                global_time_1 <= add_ln13_fu_479_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln88_reg_811 = ap_const_lv1_1))) then 
                global_time_1 <= empty_14_reg_336;
            end if; 
        end if;
    end process;

    q_in_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                q_in_fu_118(0) <= '0';
                q_in_fu_118(1) <= '1';
                q_in_fu_118(2) <= '0';
                q_in_fu_118(3) <= '0';
                q_in_fu_118(4) <= '0';
                q_in_fu_118(5) <= '0';
                q_in_fu_118(6) <= '0';
                q_in_fu_118(7) <= '0';
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln101_fu_577_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0))) then 
                                q_in_fu_118(7 downto 0) <= zext_ln38_fu_608_p1(7 downto 0);
            end if; 
        end if;
    end process;

    q_out_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                q_out_reg_314 <= q_out_1_reg_771;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                q_out_reg_314 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln101_reg_841 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0))) then
                add_ln13_3_reg_860 <= add_ln13_3_fu_677_p2;
                level_counts_addr_1_reg_866 <= zext_ln117_fu_683_p1(4 - 1 downto 0);
                tmp_level_1_reg_855 <= tmp_level_1_fu_629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                dummy_1_reg_752 <= dummy_1_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0))) then
                e_2_reg_845 <= e_2_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0))) then
                icmp_ln101_reg_841 <= icmp_ln101_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln88_1_reg_820 <= icmp_ln88_1_fu_511_p2;
                icmp_ln88_1_reg_820_pp0_iter1_reg <= icmp_ln88_1_reg_820;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln88_reg_811 <= icmp_ln88_fu_505_p2;
                tmp_end_reg_806 <= nodes_q0(127 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln88_fu_505_p2 = ap_const_lv1_1))) then
                level_addr_1_reg_815 <= zext_ln40_reg_781(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0))) then
                level_addr_2_reg_836 <= edges_q0(8 - 1 downto 0);
                trunc_ln89_reg_829 <= trunc_ln89_fu_516_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                n_reg_776 <= queue_q0;
                    zext_ln40_reg_781(31 downto 0) <= zext_ln40_fu_444_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln58_fu_404_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln58_fu_416_p2) and (tmp_fu_381_p3 = ap_const_lv1_0)) or ((icmp_ln58_1_fu_432_p2 = ap_const_lv1_0) and (icmp_ln58_fu_404_p2 = ap_const_lv1_1) and (tmp_fu_381_p3 = ap_const_lv1_0))))) then
                q_out_1_reg_771 <= q_out_1_fu_438_p2;
            end if;
        end if;
    end process;
    zext_ln40_reg_781(63 downto 32) <= "00000000000000000000000000000000";
    q_in_fu_118(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_381_p3, icmp_ln58_fu_404_p2, icmp_ln58_1_fu_432_p2, and_ln58_fu_416_p2, ap_CS_fsm_state4, icmp_ln88_fu_505_p2, icmp_ln88_1_reg_820, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_381_p3 = ap_const_lv1_1) or (((ap_const_lv1_1 = and_ln58_fu_416_p2) and (icmp_ln58_fu_404_p2 = ap_const_lv1_0)) or ((icmp_ln58_1_fu_432_p2 = ap_const_lv1_1) and (icmp_ln58_fu_404_p2 = ap_const_lv1_1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln88_fu_505_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (icmp_ln88_1_reg_820 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (icmp_ln88_1_reg_820 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln117_fu_701_p2 <= std_logic_vector(unsigned(level_counts_q0) + unsigned(ap_const_lv64_1));
    add_ln120_fu_708_p2 <= std_logic_vector(unsigned(trunc_ln117_fu_697_p1) + unsigned(ap_const_lv32_1));
    add_ln123_fu_583_p2 <= std_logic_vector(unsigned(trunc_ln88_fu_520_p1) + unsigned(ap_const_lv8_FF));
    add_ln13_1_fu_545_p2 <= std_logic_vector(unsigned(empty_14_reg_336) + unsigned(ap_const_lv32_1));
    add_ln13_2_fu_623_p2 <= std_logic_vector(unsigned(empty_14_reg_336) + unsigned(ap_const_lv32_2));
    add_ln13_3_fu_677_p2 <= std_logic_vector(unsigned(empty_14_reg_336) + unsigned(ap_const_lv32_3));
    add_ln13_4_fu_688_p2 <= std_logic_vector(unsigned(empty_14_reg_336) + unsigned(ap_const_lv32_4));
    add_ln13_fu_479_p2 <= std_logic_vector(unsigned(global_time_1) + unsigned(ap_const_lv32_1));
    add_ln58_fu_422_p2 <= std_logic_vector(unsigned(zext_ln57_1_fu_400_p1) + unsigned(ap_const_lv9_1));
    and_ln58_fu_416_p2 <= (icmp_ln58_3_fu_410_p2 and grp_fu_360_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln88_1_reg_820)
    begin
        if ((icmp_ln88_1_reg_820 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_381_p3, icmp_ln58_fu_404_p2, icmp_ln58_1_fu_432_p2, and_ln58_fu_416_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_381_p3 = ap_const_lv1_1) or (((ap_const_lv1_1 = and_ln58_fu_416_p2) and (icmp_ln58_fu_404_p2 = ap_const_lv1_0)) or ((icmp_ln58_1_fu_432_p2 = ap_const_lv1_1) and (icmp_ln58_fu_404_p2 = ap_const_lv1_1)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_e_1_phi_fu_328_p4_assign_proc : process(e_1_reg_325, icmp_ln88_1_reg_820, ap_CS_fsm_pp0_stage0, e_2_reg_845, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln88_1_reg_820 = ap_const_lv1_0))) then 
            ap_phi_mux_e_1_phi_fu_328_p4 <= e_2_reg_845;
        else 
            ap_phi_mux_e_1_phi_fu_328_p4 <= e_1_reg_325;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_15_reg_346 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_381_p3, icmp_ln58_fu_404_p2, icmp_ln58_1_fu_432_p2, and_ln58_fu_416_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_381_p3 = ap_const_lv1_1) or (((ap_const_lv1_1 = and_ln58_fu_416_p2) and (icmp_ln58_fu_404_p2 = ap_const_lv1_0)) or ((icmp_ln58_1_fu_432_p2 = ap_const_lv1_1) and (icmp_ln58_fu_404_p2 = ap_const_lv1_1)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    checkdata_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln9_fu_458_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln9_2_fu_551_p1, zext_ln9_3_fu_636_p1, zext_ln9_4_fu_714_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            checkdata_address0 <= zext_ln9_4_fu_714_p1(21 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            checkdata_address0 <= zext_ln9_3_fu_636_p1(21 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            checkdata_address0 <= zext_ln9_2_fu_551_p1(21 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            checkdata_address0 <= zext_ln9_fu_458_p1(21 - 1 downto 0);
        else 
            checkdata_address0 <= "XXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    checkdata_address1 <= zext_ln9_1_fu_524_p1(21 - 1 downto 0);

    checkdata_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            checkdata_ce0 <= ap_const_logic_1;
        else 
            checkdata_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    checkdata_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            checkdata_ce1 <= ap_const_logic_1;
        else 
            checkdata_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    checkdata_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, or_ln12_fu_472_p2, or_ln12_2_fu_570_p2, or_ln12_3_fu_670_p2, or_ln12_4_fu_729_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            checkdata_d0 <= or_ln12_4_fu_729_p2;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            checkdata_d0 <= or_ln12_3_fu_670_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            checkdata_d0 <= or_ln12_2_fu_570_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            checkdata_d0 <= or_ln12_fu_472_p2;
        else 
            checkdata_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    checkdata_d1 <= (tmp6_fu_529_p4 or ap_const_lv128_lc_2);

    checkdata_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln88_1_reg_820, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln88_1_reg_820_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln101_reg_841, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln101_reg_841 = ap_const_lv1_1) and (icmp_ln88_1_reg_820_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln101_reg_841 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0)))) then 
            checkdata_we0 <= ap_const_lv16_FFFF;
        else 
            checkdata_we0 <= ap_const_lv16_0;
        end if; 
    end process;


    checkdata_we1_assign_proc : process(icmp_ln88_1_reg_820, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0))) then 
            checkdata_we1 <= ap_const_lv16_FFFF;
        else 
            checkdata_we1 <= ap_const_lv16_0;
        end if; 
    end process;

    dummy_1_fu_389_p2 <= std_logic_vector(unsigned(dummy_reg_303) + unsigned(ap_const_lv9_1));
    e_2_fu_617_p2 <= std_logic_vector(unsigned(e_1_reg_325) + unsigned(ap_const_lv64_1));
    edges_address0 <= ap_phi_mux_e_1_phi_fu_328_p4(12 - 1 downto 0);

    edges_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            edges_ce0 <= ap_const_logic_1;
        else 
            edges_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_371_p1 <= starting_node(32 - 1 downto 0);
    grp_fu_360_p2 <= "1" when (q_in_fu_118 = ap_const_lv64_0) else "0";
    hercules_buffer_size <= global_time_1;

    hercules_buffer_size_ap_vld_assign_proc : process(ap_CS_fsm_state2, tmp_fu_381_p3, icmp_ln58_fu_404_p2, icmp_ln58_1_fu_432_p2, and_ln58_fu_416_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_fu_381_p3 = ap_const_lv1_1) or (((ap_const_lv1_1 = and_ln58_fu_416_p2) and (icmp_ln58_fu_404_p2 = ap_const_lv1_0)) or ((icmp_ln58_1_fu_432_p2 = ap_const_lv1_1) and (icmp_ln58_fu_404_p2 = ap_const_lv1_1)))))) then 
            hercules_buffer_size_ap_vld <= ap_const_logic_1;
        else 
            hercules_buffer_size_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln101_fu_577_p0 <= level_q0;
    icmp_ln101_fu_577_p2 <= "1" when (icmp_ln101_fu_577_p0 = ap_const_lv8_7F) else "0";
    icmp_ln58_1_fu_432_p2 <= "1" when (q_in_fu_118 = zext_ln58_fu_428_p1) else "0";
    icmp_ln58_3_fu_410_p2 <= "1" when (q_out_reg_314 = ap_const_lv8_FF) else "0";
    icmp_ln58_fu_404_p2 <= "1" when (unsigned(q_in_fu_118) > unsigned(zext_ln57_fu_395_p1)) else "0";
    icmp_ln88_1_fu_511_p2 <= "1" when (ap_phi_mux_e_1_phi_fu_328_p4 = tmp_end_reg_806) else "0";
    icmp_ln88_fu_505_p2 <= "1" when (unsigned(tmp_begin_fu_491_p1) < unsigned(tmp_end_fu_495_p4)) else "0";

    level_address0_assign_proc : process(ap_CS_fsm_state1, edges_q0, starting_node, level_addr_1_reg_815, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, level_addr_2_reg_836, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            level_address0 <= level_addr_2_reg_836;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            level_address0 <= level_addr_1_reg_815;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            level_address0 <= edges_q0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_address0 <= starting_node(8 - 1 downto 0);
        else 
            level_address0 <= "XXXXXXXX";
        end if; 
    end process;


    level_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            level_ce0 <= ap_const_logic_1;
        else 
            level_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    level_counts_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, level_counts_addr_1_reg_866, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln117_fu_683_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            level_counts_address0 <= level_counts_addr_1_reg_866;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            level_counts_address0 <= zext_ln117_fu_683_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_counts_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            level_counts_address0 <= "XXXX";
        end if; 
    end process;


    level_counts_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            level_counts_ce0 <= ap_const_logic_1;
        else 
            level_counts_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    level_counts_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, add_ln117_fu_701_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            level_counts_d0 <= add_ln117_fu_701_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_counts_d0 <= ap_const_lv64_1;
        else 
            level_counts_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    level_counts_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln88_1_reg_820_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln101_reg_841, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln101_reg_841 = ap_const_lv1_1) and (icmp_ln88_1_reg_820_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            level_counts_we0 <= ap_const_logic_1;
        else 
            level_counts_we0 <= ap_const_logic_0;
        end if; 
    end process;


    level_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, tmp_level_1_fu_629_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            level_d0 <= tmp_level_1_fu_629_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            level_d0 <= ap_const_lv8_0;
        else 
            level_d0 <= "XXXXXXXX";
        end if; 
    end process;


    level_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln88_1_reg_820, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln101_reg_841, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln101_reg_841 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            level_we0 <= ap_const_logic_1;
        else 
            level_we0 <= ap_const_logic_0;
        end if; 
    end process;

    nodes_address0 <= zext_ln87_fu_453_p1(8 - 1 downto 0);
    nodes_address1 <= zext_ln40_fu_444_p1(8 - 1 downto 0);

    nodes_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            nodes_ce0 <= ap_const_logic_1;
        else 
            nodes_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    nodes_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            nodes_ce1 <= ap_const_logic_1;
        else 
            nodes_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln12_2_fu_570_p2 <= (tmp7_fu_560_p4 or ap_const_lv128_lc_3);
    or_ln12_3_fu_670_p2 <= (tmp3_fu_657_p6 or ap_const_lv128_lc_4);
    or_ln12_4_fu_729_p2 <= (tmp4_fu_718_p5 or ap_const_lv128_lc_5);
    or_ln12_fu_472_p2 <= (tmp2_fu_463_p4 or ap_const_lv128_lc_1);
    q_in_1_fu_602_p2 <= std_logic_vector(unsigned(trunc_ln88_fu_520_p1) + unsigned(ap_const_lv8_1));
    q_out_1_fu_438_p2 <= std_logic_vector(unsigned(q_out_reg_314) + unsigned(ap_const_lv8_1));

    queue_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, zext_ln57_fu_395_p1, ap_block_pp0_stage2, zext_ln123_fu_597_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            queue_address0 <= zext_ln123_fu_597_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            queue_address0 <= zext_ln57_fu_395_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            queue_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        else 
            queue_address0 <= "XXXXXXXX";
        end if; 
    end process;


    queue_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            queue_ce0 <= ap_const_logic_1;
        else 
            queue_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    queue_d0_assign_proc : process(ap_CS_fsm_state1, trunc_ln89_reg_829, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2, empty_fu_371_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            queue_d0 <= trunc_ln89_reg_829;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            queue_d0 <= empty_fu_371_p1;
        else 
            queue_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    queue_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln88_1_reg_820, icmp_ln101_fu_577_p2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln101_fu_577_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln88_1_reg_820 = ap_const_lv1_0)))) then 
            queue_we0 <= ap_const_logic_1;
        else 
            queue_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln123_fu_589_p3 <= 
        ap_const_lv8_FF when (grp_fu_360_p2(0) = '1') else 
        add_ln123_fu_583_p2;
    select_ln12_fu_649_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_1_fu_641_p3(0) = '1') else 
        ap_const_lv24_0;
        sext_ln11_1_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_level_1_reg_855),32));

    sext_ln11_fu_556_p0 <= level_q0;
        sext_ln11_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln11_fu_556_p0),32));

    tmp2_fu_463_p4 <= ((global_time_1 & n_reg_776) & ap_const_lv64_0);
    tmp3_fu_657_p6 <= ((((add_ln13_2_fu_623_p2 & select_ln12_fu_649_p3) & tmp_level_1_fu_629_p2) & trunc_ln89_reg_829) & ap_const_lv32_0);
    tmp4_fu_718_p5 <= (((add_ln13_3_reg_860 & add_ln120_fu_708_p2) & sext_ln11_1_fu_694_p1) & ap_const_lv32_0);
    tmp6_fu_529_p4 <= ((empty_14_reg_336 & trunc_ln89_reg_829) & ap_const_lv64_0);
    tmp7_fu_560_p4 <= ((add_ln13_1_fu_545_p2 & sext_ln11_fu_556_p1) & ap_const_lv64_0);
    tmp_1_fu_641_p3 <= tmp_level_1_fu_629_p2(7 downto 7);
    tmp_begin_fu_491_p1 <= nodes_q1(64 - 1 downto 0);
    tmp_end_fu_495_p4 <= nodes_q0(127 downto 64);
    tmp_fu_381_p3 <= dummy_reg_303(8 downto 8);
    tmp_level_1_fu_629_p2 <= std_logic_vector(unsigned(level_q0) + unsigned(ap_const_lv8_1));
    trunc_ln117_fu_697_p1 <= level_counts_q0(32 - 1 downto 0);
    trunc_ln87_fu_449_p1 <= queue_q0(8 - 1 downto 0);
    trunc_ln88_fu_520_p1 <= q_in_fu_118(8 - 1 downto 0);
    trunc_ln89_fu_516_p1 <= edges_q0(32 - 1 downto 0);
    zext_ln117_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_level_1_fu_629_p2),64));
    zext_ln123_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln123_fu_589_p3),64));
    zext_ln38_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_in_1_fu_602_p2),64));
    zext_ln40_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(queue_q0),64));
    zext_ln57_1_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_out_reg_314),9));
    zext_ln57_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(q_out_reg_314),64));
    zext_ln58_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln58_fu_422_p2),64));
    zext_ln87_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln87_fu_449_p1),64));
    zext_ln9_1_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_14_reg_336),64));
    zext_ln9_2_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_1_fu_545_p2),64));
    zext_ln9_3_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_2_fu_623_p2),64));
    zext_ln9_4_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_3_reg_860),64));
    zext_ln9_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(global_time_1),64));
end behav;
