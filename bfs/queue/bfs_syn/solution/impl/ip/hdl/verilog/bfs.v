// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bfs_bfs,hls_ip_2020_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.418000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=500,HLS_SYN_LUT=1609,HLS_VERSION=2020_2}" *)

module bfs (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        nodes_address0,
        nodes_ce0,
        nodes_q0,
        nodes_address1,
        nodes_ce1,
        nodes_q1,
        edges_address0,
        edges_ce0,
        edges_q0,
        starting_node,
        level_address0,
        level_ce0,
        level_we0,
        level_d0,
        level_q0,
        level_counts_address0,
        level_counts_ce0,
        level_counts_we0,
        level_counts_d0,
        level_counts_q0,
        checkdata_address0,
        checkdata_ce0,
        checkdata_we0,
        checkdata_d0,
        checkdata_address1,
        checkdata_ce1,
        checkdata_we1,
        checkdata_d1,
        hercules_buffer_size,
        hercules_buffer_size_ap_vld
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp0_stage0 = 8'd16;
parameter    ap_ST_fsm_pp0_stage1 = 8'd32;
parameter    ap_ST_fsm_pp0_stage2 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] nodes_address0;
output   nodes_ce0;
input  [127:0] nodes_q0;
output  [7:0] nodes_address1;
output   nodes_ce1;
input  [127:0] nodes_q1;
output  [11:0] edges_address0;
output   edges_ce0;
input  [63:0] edges_q0;
input  [63:0] starting_node;
output  [7:0] level_address0;
output   level_ce0;
output   level_we0;
output  [7:0] level_d0;
input  [7:0] level_q0;
output  [3:0] level_counts_address0;
output   level_counts_ce0;
output   level_counts_we0;
output  [63:0] level_counts_d0;
input  [63:0] level_counts_q0;
output  [20:0] checkdata_address0;
output   checkdata_ce0;
output  [15:0] checkdata_we0;
output  [127:0] checkdata_d0;
output  [20:0] checkdata_address1;
output   checkdata_ce1;
output  [15:0] checkdata_we1;
output  [127:0] checkdata_d1;
output  [31:0] hercules_buffer_size;
output   hercules_buffer_size_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg nodes_ce0;
reg nodes_ce1;
reg edges_ce0;
reg[7:0] level_address0;
reg level_ce0;
reg level_we0;
reg[7:0] level_d0;
reg[3:0] level_counts_address0;
reg level_counts_ce0;
reg level_counts_we0;
reg[63:0] level_counts_d0;
reg[20:0] checkdata_address0;
reg checkdata_ce0;
reg[15:0] checkdata_we0;
reg[127:0] checkdata_d0;
reg checkdata_ce1;
reg[15:0] checkdata_we1;
reg hercules_buffer_size_ap_vld;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] global_time_1;
reg   [63:0] e_1_reg_325;
reg   [31:0] empty_14_reg_336;
wire   [8:0] dummy_1_fu_389_p2;
reg   [8:0] dummy_1_reg_752;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_381_p3;
wire   [0:0] icmp_ln58_fu_404_p2;
wire   [0:0] icmp_ln58_1_fu_432_p2;
wire   [0:0] and_ln58_fu_416_p2;
wire   [7:0] q_out_1_fu_438_p2;
reg   [7:0] q_out_1_reg_771;
wire   [31:0] queue_q0;
reg   [31:0] n_reg_776;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln40_fu_444_p1;
reg   [63:0] zext_ln40_reg_781;
wire   [31:0] add_ln13_fu_479_p2;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_begin_fu_491_p1;
wire   [63:0] tmp_end_fu_495_p4;
reg   [63:0] tmp_end_reg_806;
wire   [0:0] icmp_ln88_fu_505_p2;
reg   [0:0] icmp_ln88_reg_811;
reg   [7:0] level_addr_1_reg_815;
wire   [0:0] icmp_ln88_1_fu_511_p2;
reg   [0:0] icmp_ln88_1_reg_820;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln88_1_reg_820_pp0_iter1_reg;
wire   [31:0] trunc_ln89_fu_516_p1;
reg   [31:0] trunc_ln89_reg_829;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] level_addr_2_reg_836;
wire   [0:0] icmp_ln101_fu_577_p2;
reg   [0:0] icmp_ln101_reg_841;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state7_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [63:0] e_2_fu_617_p2;
reg   [63:0] e_2_reg_845;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] add_ln13_2_fu_623_p2;
wire  signed [7:0] tmp_level_1_fu_629_p2;
reg  signed [7:0] tmp_level_1_reg_855;
wire   [31:0] add_ln13_3_fu_677_p2;
reg   [31:0] add_ln13_3_reg_860;
reg   [3:0] level_counts_addr_1_reg_866;
wire   [31:0] add_ln13_4_fu_688_p2;
wire    ap_block_pp0_stage2_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter1;
reg   [7:0] queue_address0;
reg    queue_ce0;
reg    queue_we0;
reg   [31:0] queue_d0;
reg   [8:0] dummy_reg_303;
wire    ap_CS_fsm_state10;
reg   [7:0] q_out_reg_314;
reg   [63:0] ap_phi_mux_e_1_phi_fu_328_p4;
wire    ap_block_pp0_stage0;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_15_reg_346;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_15_reg_346;
wire   [63:0] zext_ln57_fu_395_p1;
wire   [63:0] zext_ln87_fu_453_p1;
wire   [63:0] zext_ln9_fu_458_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln9_1_fu_524_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln9_2_fu_551_p1;
wire   [63:0] zext_ln123_fu_597_p1;
wire   [63:0] zext_ln9_3_fu_636_p1;
wire   [63:0] zext_ln117_fu_683_p1;
wire   [63:0] zext_ln9_4_fu_714_p1;
reg   [63:0] q_in_fu_118;
wire   [63:0] zext_ln38_fu_608_p1;
wire   [63:0] add_ln117_fu_701_p2;
wire   [31:0] empty_fu_371_p1;
wire   [127:0] or_ln12_fu_472_p2;
wire   [127:0] or_ln12_2_fu_570_p2;
wire   [127:0] or_ln12_3_fu_670_p2;
wire   [127:0] or_ln12_4_fu_729_p2;
wire   [0:0] grp_fu_360_p2;
wire   [0:0] icmp_ln58_3_fu_410_p2;
wire   [8:0] zext_ln57_1_fu_400_p1;
wire   [8:0] add_ln58_fu_422_p2;
wire   [63:0] zext_ln58_fu_428_p1;
wire   [7:0] trunc_ln87_fu_449_p1;
wire   [127:0] tmp2_fu_463_p4;
wire   [127:0] tmp6_fu_529_p4;
wire   [31:0] add_ln13_1_fu_545_p2;
wire  signed [7:0] sext_ln11_fu_556_p0;
wire  signed [31:0] sext_ln11_fu_556_p1;
wire   [127:0] tmp7_fu_560_p4;
wire  signed [7:0] icmp_ln101_fu_577_p0;
wire   [7:0] trunc_ln88_fu_520_p1;
wire   [7:0] add_ln123_fu_583_p2;
wire   [7:0] select_ln123_fu_589_p3;
wire   [7:0] q_in_1_fu_602_p2;
wire   [0:0] tmp_1_fu_641_p3;
wire   [23:0] select_ln12_fu_649_p3;
wire   [127:0] tmp3_fu_657_p6;
wire   [31:0] trunc_ln117_fu_697_p1;
wire   [31:0] add_ln120_fu_708_p2;
wire  signed [31:0] sext_ln11_1_fu_694_p1;
wire   [127:0] tmp4_fu_718_p5;
reg   [7:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 global_time_1 = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

bfs_queue #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
queue_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(queue_address0),
    .ce0(queue_ce0),
    .we0(queue_we0),
    .d0(queue_d0),
    .q0(queue_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln88_fu_505_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln88_fu_505_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln101_reg_841 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln88_1_reg_820 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_empty_15_reg_346 <= add_ln13_2_fu_623_p2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln101_reg_841 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln88_1_reg_820 == 1'd0))) begin
        ap_phi_reg_pp0_iter1_empty_15_reg_346 <= add_ln13_4_fu_688_p2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_phi_reg_pp0_iter1_empty_15_reg_346 <= ap_phi_reg_pp0_iter0_empty_15_reg_346;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dummy_reg_303 <= dummy_1_reg_752;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        dummy_reg_303 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln88_fu_505_p2 == 1'd1))) begin
        e_1_reg_325 <= tmp_begin_fu_491_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln88_1_reg_820 == 1'd0))) begin
        e_1_reg_325 <= e_2_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln88_fu_505_p2 == 1'd1))) begin
        empty_14_reg_336 <= add_ln13_fu_479_p2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln88_1_reg_820_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        empty_14_reg_336 <= ap_phi_reg_pp0_iter1_empty_15_reg_346;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        global_time_1 <= add_ln13_fu_479_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln88_reg_811 == 1'd1))) begin
        global_time_1 <= empty_14_reg_336;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                q_in_fu_118[0] <= 1'b0;
        q_in_fu_118[1] <= 1'b1;
        q_in_fu_118[2] <= 1'b0;
        q_in_fu_118[3] <= 1'b0;
        q_in_fu_118[4] <= 1'b0;
        q_in_fu_118[5] <= 1'b0;
        q_in_fu_118[6] <= 1'b0;
        q_in_fu_118[7] <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_fu_577_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln88_1_reg_820 == 1'd0))) begin
                q_in_fu_118[7 : 0] <= zext_ln38_fu_608_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        q_out_reg_314 <= q_out_1_reg_771;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        q_out_reg_314 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln101_reg_841 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln88_1_reg_820 == 1'd0))) begin
        add_ln13_3_reg_860 <= add_ln13_3_fu_677_p2;
        level_counts_addr_1_reg_866 <= zext_ln117_fu_683_p1;
        tmp_level_1_reg_855 <= tmp_level_1_fu_629_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        dummy_1_reg_752 <= dummy_1_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln88_1_reg_820 == 1'd0))) begin
        e_2_reg_845 <= e_2_fu_617_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln88_1_reg_820 == 1'd0))) begin
        icmp_ln101_reg_841 <= icmp_ln101_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln88_1_reg_820 <= icmp_ln88_1_fu_511_p2;
        icmp_ln88_1_reg_820_pp0_iter1_reg <= icmp_ln88_1_reg_820;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln88_reg_811 <= icmp_ln88_fu_505_p2;
        tmp_end_reg_806 <= {{nodes_q0[127:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln88_fu_505_p2 == 1'd1))) begin
        level_addr_1_reg_815 <= zext_ln40_reg_781;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln88_1_reg_820 == 1'd0))) begin
        level_addr_2_reg_836 <= edges_q0;
        trunc_ln89_reg_829 <= trunc_ln89_fu_516_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        n_reg_776 <= queue_q0;
        zext_ln40_reg_781[31 : 0] <= zext_ln40_fu_444_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln58_fu_404_p2 == 1'd0) & (1'd0 == and_ln58_fu_416_p2) & (tmp_fu_381_p3 == 1'd0)) | ((icmp_ln58_1_fu_432_p2 == 1'd0) & (icmp_ln58_fu_404_p2 == 1'd1) & (tmp_fu_381_p3 == 1'd0))))) begin
        q_out_1_reg_771 <= q_out_1_fu_438_p2;
    end
end

always @ (*) begin
    if ((icmp_ln88_1_reg_820 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((tmp_fu_381_p3 == 1'd1) | (((1'd1 == and_ln58_fu_416_p2) & (icmp_ln58_fu_404_p2 == 1'd0)) | ((icmp_ln58_1_fu_432_p2 == 1'd1) & (icmp_ln58_fu_404_p2 == 1'd1)))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln88_1_reg_820 == 1'd0))) begin
        ap_phi_mux_e_1_phi_fu_328_p4 = e_2_reg_845;
    end else begin
        ap_phi_mux_e_1_phi_fu_328_p4 = e_1_reg_325;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((tmp_fu_381_p3 == 1'd1) | (((1'd1 == and_ln58_fu_416_p2) & (icmp_ln58_fu_404_p2 == 1'd0)) | ((icmp_ln58_1_fu_432_p2 == 1'd1) & (icmp_ln58_fu_404_p2 == 1'd1)))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        checkdata_address0 = zext_ln9_4_fu_714_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        checkdata_address0 = zext_ln9_3_fu_636_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        checkdata_address0 = zext_ln9_2_fu_551_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        checkdata_address0 = zext_ln9_fu_458_p1;
    end else begin
        checkdata_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        checkdata_ce0 = 1'b1;
    end else begin
        checkdata_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        checkdata_ce1 = 1'b1;
    end else begin
        checkdata_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        checkdata_d0 = or_ln12_4_fu_729_p2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        checkdata_d0 = or_ln12_3_fu_670_p2;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        checkdata_d0 = or_ln12_2_fu_570_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        checkdata_d0 = or_ln12_fu_472_p2;
    end else begin
        checkdata_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln101_reg_841 == 1'd1) & (icmp_ln88_1_reg_820_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln101_reg_841 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln88_1_reg_820 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln88_1_reg_820 == 1'd0)))) begin
        checkdata_we0 = 16'd65535;
    end else begin
        checkdata_we0 = 16'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln88_1_reg_820 == 1'd0))) begin
        checkdata_we1 = 16'd65535;
    end else begin
        checkdata_we1 = 16'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        edges_ce0 = 1'b1;
    end else begin
        edges_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((tmp_fu_381_p3 == 1'd1) | (((1'd1 == and_ln58_fu_416_p2) & (icmp_ln58_fu_404_p2 == 1'd0)) | ((icmp_ln58_1_fu_432_p2 == 1'd1) & (icmp_ln58_fu_404_p2 == 1'd1)))))) begin
        hercules_buffer_size_ap_vld = 1'b1;
    end else begin
        hercules_buffer_size_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        level_address0 = level_addr_2_reg_836;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        level_address0 = level_addr_1_reg_815;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        level_address0 = edges_q0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        level_address0 = starting_node;
    end else begin
        level_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        level_ce0 = 1'b1;
    end else begin
        level_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        level_counts_address0 = level_counts_addr_1_reg_866;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        level_counts_address0 = zext_ln117_fu_683_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        level_counts_address0 = 64'd0;
    end else begin
        level_counts_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        level_counts_ce0 = 1'b1;
    end else begin
        level_counts_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        level_counts_d0 = add_ln117_fu_701_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        level_counts_d0 = 64'd1;
    end else begin
        level_counts_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln101_reg_841 == 1'd1) & (icmp_ln88_1_reg_820_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        level_counts_we0 = 1'b1;
    end else begin
        level_counts_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        level_d0 = tmp_level_1_fu_629_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        level_d0 = 8'd0;
    end else begin
        level_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln101_reg_841 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln88_1_reg_820 == 1'd0)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        level_we0 = 1'b1;
    end else begin
        level_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        nodes_ce0 = 1'b1;
    end else begin
        nodes_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        nodes_ce1 = 1'b1;
    end else begin
        nodes_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        queue_address0 = zext_ln123_fu_597_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        queue_address0 = zext_ln57_fu_395_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        queue_address0 = 64'd0;
    end else begin
        queue_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        queue_ce0 = 1'b1;
    end else begin
        queue_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2))) begin
        queue_d0 = trunc_ln89_reg_829;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        queue_d0 = empty_fu_371_p1;
    end else begin
        queue_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln101_fu_577_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln88_1_reg_820 == 1'd0)))) begin
        queue_we0 = 1'b1;
    end else begin
        queue_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((tmp_fu_381_p3 == 1'd1) | (((1'd1 == and_ln58_fu_416_p2) & (icmp_ln58_fu_404_p2 == 1'd0)) | ((icmp_ln58_1_fu_432_p2 == 1'd1) & (icmp_ln58_fu_404_p2 == 1'd1)))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln88_fu_505_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (icmp_ln88_1_reg_820 == 1'd1)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (icmp_ln88_1_reg_820 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln117_fu_701_p2 = (level_counts_q0 + 64'd1);

assign add_ln120_fu_708_p2 = (trunc_ln117_fu_697_p1 + 32'd1);

assign add_ln123_fu_583_p2 = ($signed(trunc_ln88_fu_520_p1) + $signed(8'd255));

assign add_ln13_1_fu_545_p2 = (empty_14_reg_336 + 32'd1);

assign add_ln13_2_fu_623_p2 = (empty_14_reg_336 + 32'd2);

assign add_ln13_3_fu_677_p2 = (empty_14_reg_336 + 32'd3);

assign add_ln13_4_fu_688_p2 = (empty_14_reg_336 + 32'd4);

assign add_ln13_fu_479_p2 = (global_time_1 + 32'd1);

assign add_ln58_fu_422_p2 = (zext_ln57_1_fu_400_p1 + 9'd1);

assign and_ln58_fu_416_p2 = (icmp_ln58_3_fu_410_p2 & grp_fu_360_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_empty_15_reg_346 = 'bx;

assign checkdata_address1 = zext_ln9_1_fu_524_p1;

assign checkdata_d1 = (tmp6_fu_529_p4 | 128'd11);

assign dummy_1_fu_389_p2 = (dummy_reg_303 + 9'd1);

assign e_2_fu_617_p2 = (e_1_reg_325 + 64'd1);

assign edges_address0 = ap_phi_mux_e_1_phi_fu_328_p4;

assign empty_fu_371_p1 = starting_node[31:0];

assign grp_fu_360_p2 = ((q_in_fu_118 == 64'd0) ? 1'b1 : 1'b0);

assign hercules_buffer_size = global_time_1;

assign icmp_ln101_fu_577_p0 = level_q0;

assign icmp_ln101_fu_577_p2 = ((icmp_ln101_fu_577_p0 == 8'd127) ? 1'b1 : 1'b0);

assign icmp_ln58_1_fu_432_p2 = ((q_in_fu_118 == zext_ln58_fu_428_p1) ? 1'b1 : 1'b0);

assign icmp_ln58_3_fu_410_p2 = ((q_out_reg_314 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_404_p2 = ((q_in_fu_118 > zext_ln57_fu_395_p1) ? 1'b1 : 1'b0);

assign icmp_ln88_1_fu_511_p2 = ((ap_phi_mux_e_1_phi_fu_328_p4 == tmp_end_reg_806) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_505_p2 = ((tmp_begin_fu_491_p1 < tmp_end_fu_495_p4) ? 1'b1 : 1'b0);

assign nodes_address0 = zext_ln87_fu_453_p1;

assign nodes_address1 = zext_ln40_fu_444_p1;

assign or_ln12_2_fu_570_p2 = (tmp7_fu_560_p4 | 128'd10);

assign or_ln12_3_fu_670_p2 = (tmp3_fu_657_p6 | 128'd12);

assign or_ln12_4_fu_729_p2 = (tmp4_fu_718_p5 | 128'd13);

assign or_ln12_fu_472_p2 = (tmp2_fu_463_p4 | 128'd14);

assign q_in_1_fu_602_p2 = (trunc_ln88_fu_520_p1 + 8'd1);

assign q_out_1_fu_438_p2 = (q_out_reg_314 + 8'd1);

assign select_ln123_fu_589_p3 = ((grp_fu_360_p2[0:0] == 1'b1) ? 8'd255 : add_ln123_fu_583_p2);

assign select_ln12_fu_649_p3 = ((tmp_1_fu_641_p3[0:0] == 1'b1) ? 24'd16777215 : 24'd0);

assign sext_ln11_1_fu_694_p1 = tmp_level_1_reg_855;

assign sext_ln11_fu_556_p0 = level_q0;

assign sext_ln11_fu_556_p1 = sext_ln11_fu_556_p0;

assign tmp2_fu_463_p4 = {{{global_time_1}, {n_reg_776}}, {64'd0}};

assign tmp3_fu_657_p6 = {{{{{add_ln13_2_fu_623_p2}, {select_ln12_fu_649_p3}}, {tmp_level_1_fu_629_p2}}, {trunc_ln89_reg_829}}, {32'd0}};

assign tmp4_fu_718_p5 = {{{{add_ln13_3_reg_860}, {add_ln120_fu_708_p2}}, {sext_ln11_1_fu_694_p1}}, {32'd0}};

assign tmp6_fu_529_p4 = {{{empty_14_reg_336}, {trunc_ln89_reg_829}}, {64'd0}};

assign tmp7_fu_560_p4 = {{{add_ln13_1_fu_545_p2}, {sext_ln11_fu_556_p1}}, {64'd0}};

assign tmp_1_fu_641_p3 = tmp_level_1_fu_629_p2[32'd7];

assign tmp_begin_fu_491_p1 = nodes_q1[63:0];

assign tmp_end_fu_495_p4 = {{nodes_q0[127:64]}};

assign tmp_fu_381_p3 = dummy_reg_303[32'd8];

assign tmp_level_1_fu_629_p2 = (level_q0 + 8'd1);

assign trunc_ln117_fu_697_p1 = level_counts_q0[31:0];

assign trunc_ln87_fu_449_p1 = queue_q0[7:0];

assign trunc_ln88_fu_520_p1 = q_in_fu_118[7:0];

assign trunc_ln89_fu_516_p1 = edges_q0[31:0];

assign zext_ln117_fu_683_p1 = $unsigned(tmp_level_1_fu_629_p2);

assign zext_ln123_fu_597_p1 = select_ln123_fu_589_p3;

assign zext_ln38_fu_608_p1 = q_in_1_fu_602_p2;

assign zext_ln40_fu_444_p1 = queue_q0;

assign zext_ln57_1_fu_400_p1 = q_out_reg_314;

assign zext_ln57_fu_395_p1 = q_out_reg_314;

assign zext_ln58_fu_428_p1 = add_ln58_fu_422_p2;

assign zext_ln87_fu_453_p1 = trunc_ln87_fu_449_p1;

assign zext_ln9_1_fu_524_p1 = empty_14_reg_336;

assign zext_ln9_2_fu_551_p1 = add_ln13_1_fu_545_p2;

assign zext_ln9_3_fu_636_p1 = add_ln13_2_fu_623_p2;

assign zext_ln9_4_fu_714_p1 = add_ln13_3_reg_860;

assign zext_ln9_fu_458_p1 = global_time_1;

always @ (posedge ap_clk) begin
    zext_ln40_reg_781[63:32] <= 32'b00000000000000000000000000000000;
    q_in_fu_118[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //bfs
