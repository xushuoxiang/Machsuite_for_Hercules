// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module backprop_backprop_Pipeline_VITIS_LOOP_80_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_difference_2_025,
        output_difference_1_024,
        output_difference_0_023,
        net_outputs_0_1_reload,
        net_outputs_1_1_reload,
        net_outputs_2_1_reload,
        sub_ln81,
        training_targets_address0,
        training_targets_ce0,
        training_targets_q0,
        dactivations3_0_1_reload,
        dactivations3_1_1_reload,
        dactivations3_2_1_reload,
        output_difference_2_1_out,
        output_difference_2_1_out_ap_vld,
        output_difference_1_1_out,
        output_difference_1_1_out_ap_vld,
        output_difference_0_1_out,
        output_difference_0_1_out_ap_vld,
        grp_fu_6768_p_din0,
        grp_fu_6768_p_din1,
        grp_fu_6768_p_opcode,
        grp_fu_6768_p_dout0,
        grp_fu_6768_p_ce,
        grp_fu_6776_p_din0,
        grp_fu_6776_p_din1,
        grp_fu_6776_p_dout0,
        grp_fu_6776_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] output_difference_2_025;
input  [63:0] output_difference_1_024;
input  [63:0] output_difference_0_023;
input  [63:0] net_outputs_0_1_reload;
input  [63:0] net_outputs_1_1_reload;
input  [63:0] net_outputs_2_1_reload;
input  [8:0] sub_ln81;
output  [8:0] training_targets_address0;
output   training_targets_ce0;
input  [63:0] training_targets_q0;
input  [63:0] dactivations3_0_1_reload;
input  [63:0] dactivations3_1_1_reload;
input  [63:0] dactivations3_2_1_reload;
output  [63:0] output_difference_2_1_out;
output   output_difference_2_1_out_ap_vld;
output  [63:0] output_difference_1_1_out;
output   output_difference_1_1_out_ap_vld;
output  [63:0] output_difference_0_1_out;
output   output_difference_0_1_out_ap_vld;
output  [63:0] grp_fu_6768_p_din0;
output  [63:0] grp_fu_6768_p_din1;
output  [0:0] grp_fu_6768_p_opcode;
input  [63:0] grp_fu_6768_p_dout0;
output   grp_fu_6768_p_ce;
output  [63:0] grp_fu_6776_p_din0;
output  [63:0] grp_fu_6776_p_din1;
input  [63:0] grp_fu_6776_p_dout0;
output   grp_fu_6776_p_ce;

reg ap_idle;
reg training_targets_ce0;
reg output_difference_2_1_out_ap_vld;
reg output_difference_1_1_out_ap_vld;
reg output_difference_0_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln80_fu_211_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] i_8_reg_360;
reg   [1:0] i_8_reg_360_pp0_iter1_reg;
reg   [1:0] i_8_reg_360_pp0_iter2_reg;
reg   [1:0] i_8_reg_360_pp0_iter3_reg;
reg   [1:0] i_8_reg_360_pp0_iter4_reg;
reg   [1:0] i_8_reg_360_pp0_iter5_reg;
reg   [1:0] i_8_reg_360_pp0_iter6_reg;
reg   [1:0] i_8_reg_360_pp0_iter7_reg;
reg   [1:0] i_8_reg_360_pp0_iter8_reg;
reg   [1:0] i_8_reg_360_pp0_iter9_reg;
reg   [1:0] i_8_reg_360_pp0_iter10_reg;
reg   [1:0] i_8_reg_360_pp0_iter11_reg;
reg   [0:0] icmp_ln80_reg_366;
reg   [0:0] icmp_ln80_reg_366_pp0_iter1_reg;
reg   [0:0] icmp_ln80_reg_366_pp0_iter2_reg;
reg   [0:0] icmp_ln80_reg_366_pp0_iter3_reg;
reg   [0:0] icmp_ln80_reg_366_pp0_iter4_reg;
reg   [0:0] icmp_ln80_reg_366_pp0_iter5_reg;
reg   [0:0] icmp_ln80_reg_366_pp0_iter6_reg;
reg   [0:0] icmp_ln80_reg_366_pp0_iter7_reg;
reg   [0:0] icmp_ln80_reg_366_pp0_iter8_reg;
reg   [0:0] icmp_ln80_reg_366_pp0_iter9_reg;
reg   [0:0] icmp_ln80_reg_366_pp0_iter10_reg;
reg   [63:0] training_targets_load_reg_375;
wire   [63:0] tmp_9_fu_243_p5;
wire   [63:0] bitcast_ln81_fu_252_p1;
wire   [63:0] xor_ln81_fu_260_p2;
reg   [63:0] xor_ln81_reg_390;
wire   [63:0] tmp_s_fu_266_p5;
reg   [63:0] tmp_s_reg_395;
wire   [63:0] bitcast_ln81_2_fu_274_p1;
reg   [63:0] output_difference_1_4_reg_405;
wire   [63:0] zext_ln81_1_fu_233_p1;
wire    ap_block_pp0_stage0;
reg   [1:0] i_fu_70;
wire   [1:0] add_ln80_fu_217_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_8;
reg   [63:0] output_difference_1_fu_74;
reg   [63:0] output_difference_1_1_fu_78;
reg   [63:0] output_difference_1_2_fu_82;
wire    ap_block_pp0_stage0_01001;
wire   [8:0] zext_ln81_fu_223_p1;
wire   [8:0] add_ln81_fu_227_p2;
wire   [63:0] bitcast_ln81_1_fu_256_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_434;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_done_reg = 1'b0;
end

backprop_mux_32_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_32_64_1_1_U244(
    .din0(net_outputs_0_1_reload),
    .din1(net_outputs_1_1_reload),
    .din2(net_outputs_2_1_reload),
    .din3(i_8_reg_360_pp0_iter1_reg),
    .dout(tmp_9_fu_243_p5)
);

backprop_mux_32_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_32_64_1_1_U245(
    .din0(dactivations3_0_1_reload),
    .din1(dactivations3_1_1_reload),
    .din2(dactivations3_2_1_reload),
    .din3(i_8_reg_360_pp0_iter5_reg),
    .dout(tmp_s_fu_266_p5)
);

backprop_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln80_fu_211_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_70 <= add_ln80_fu_217_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            output_difference_1_1_fu_78 <= output_difference_1_024;
        end else if (((ap_enable_reg_pp0_iter12 == 1'b1) & (i_8_reg_360_pp0_iter11_reg == 2'd1))) begin
            output_difference_1_1_fu_78 <= output_difference_1_4_reg_405;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            output_difference_1_2_fu_82 <= output_difference_2_025;
        end else if ((1'b1 == ap_condition_434)) begin
            output_difference_1_2_fu_82 <= output_difference_1_4_reg_405;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            output_difference_1_fu_74 <= output_difference_0_023;
        end else if (((ap_enable_reg_pp0_iter12 == 1'b1) & (i_8_reg_360_pp0_iter11_reg == 2'd0))) begin
            output_difference_1_fu_74 <= output_difference_1_4_reg_405;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        i_8_reg_360_pp0_iter10_reg <= i_8_reg_360_pp0_iter9_reg;
        i_8_reg_360_pp0_iter11_reg <= i_8_reg_360_pp0_iter10_reg;
        i_8_reg_360_pp0_iter2_reg <= i_8_reg_360_pp0_iter1_reg;
        i_8_reg_360_pp0_iter3_reg <= i_8_reg_360_pp0_iter2_reg;
        i_8_reg_360_pp0_iter4_reg <= i_8_reg_360_pp0_iter3_reg;
        i_8_reg_360_pp0_iter5_reg <= i_8_reg_360_pp0_iter4_reg;
        i_8_reg_360_pp0_iter6_reg <= i_8_reg_360_pp0_iter5_reg;
        i_8_reg_360_pp0_iter7_reg <= i_8_reg_360_pp0_iter6_reg;
        i_8_reg_360_pp0_iter8_reg <= i_8_reg_360_pp0_iter7_reg;
        i_8_reg_360_pp0_iter9_reg <= i_8_reg_360_pp0_iter8_reg;
        icmp_ln80_reg_366_pp0_iter10_reg <= icmp_ln80_reg_366_pp0_iter9_reg;
        icmp_ln80_reg_366_pp0_iter2_reg <= icmp_ln80_reg_366_pp0_iter1_reg;
        icmp_ln80_reg_366_pp0_iter3_reg <= icmp_ln80_reg_366_pp0_iter2_reg;
        icmp_ln80_reg_366_pp0_iter4_reg <= icmp_ln80_reg_366_pp0_iter3_reg;
        icmp_ln80_reg_366_pp0_iter5_reg <= icmp_ln80_reg_366_pp0_iter4_reg;
        icmp_ln80_reg_366_pp0_iter6_reg <= icmp_ln80_reg_366_pp0_iter5_reg;
        icmp_ln80_reg_366_pp0_iter7_reg <= icmp_ln80_reg_366_pp0_iter6_reg;
        icmp_ln80_reg_366_pp0_iter8_reg <= icmp_ln80_reg_366_pp0_iter7_reg;
        icmp_ln80_reg_366_pp0_iter9_reg <= icmp_ln80_reg_366_pp0_iter8_reg;
        output_difference_1_4_reg_405 <= grp_fu_6776_p_dout0;
        tmp_s_reg_395 <= tmp_s_fu_266_p5;
        xor_ln81_reg_390 <= xor_ln81_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_8_reg_360 <= ap_sig_allocacmp_i_8;
        i_8_reg_360_pp0_iter1_reg <= i_8_reg_360;
        icmp_ln80_reg_366 <= icmp_ln80_fu_211_p2;
        icmp_ln80_reg_366_pp0_iter1_reg <= icmp_ln80_reg_366;
        training_targets_load_reg_375 <= training_targets_q0;
    end
end

always @ (*) begin
    if (((icmp_ln80_fu_211_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_8 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_8 = i_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_reg_366_pp0_iter10_reg == 1'd1))) begin
        output_difference_0_1_out_ap_vld = 1'b1;
    end else begin
        output_difference_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_reg_366_pp0_iter10_reg == 1'd1))) begin
        output_difference_1_1_out_ap_vld = 1'b1;
    end else begin
        output_difference_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln80_reg_366_pp0_iter10_reg == 1'd1))) begin
        output_difference_2_1_out_ap_vld = 1'b1;
    end else begin
        output_difference_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        training_targets_ce0 = 1'b1;
    end else begin
        training_targets_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln80_fu_217_p2 = (ap_sig_allocacmp_i_8 + 2'd1);

assign add_ln81_fu_227_p2 = (zext_ln81_fu_223_p1 + sub_ln81);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_434 = (~(i_8_reg_360_pp0_iter11_reg == 2'd1) & ~(i_8_reg_360_pp0_iter11_reg == 2'd0) & (ap_enable_reg_pp0_iter12 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln81_1_fu_256_p1 = grp_fu_6768_p_dout0;

assign bitcast_ln81_2_fu_274_p1 = xor_ln81_reg_390;

assign bitcast_ln81_fu_252_p1 = training_targets_load_reg_375;

assign grp_fu_6768_p_ce = 1'b1;

assign grp_fu_6768_p_din0 = tmp_9_fu_243_p5;

assign grp_fu_6768_p_din1 = bitcast_ln81_fu_252_p1;

assign grp_fu_6768_p_opcode = 2'd1;

assign grp_fu_6776_p_ce = 1'b1;

assign grp_fu_6776_p_din0 = bitcast_ln81_2_fu_274_p1;

assign grp_fu_6776_p_din1 = tmp_s_reg_395;

assign icmp_ln80_fu_211_p2 = ((ap_sig_allocacmp_i_8 == 2'd3) ? 1'b1 : 1'b0);

assign output_difference_0_1_out = output_difference_1_fu_74;

assign output_difference_1_1_out = output_difference_1_1_fu_78;

assign output_difference_2_1_out = output_difference_1_2_fu_82;

assign training_targets_address0 = zext_ln81_1_fu_233_p1;

assign xor_ln81_fu_260_p2 = (bitcast_ln81_1_fu_256_p1 ^ 64'd9223372036854775808);

assign zext_ln81_1_fu_233_p1 = add_ln81_fu_227_p2;

assign zext_ln81_fu_223_p1 = ap_sig_allocacmp_i_8;

endmodule //backprop_backprop_Pipeline_VITIS_LOOP_80_1
