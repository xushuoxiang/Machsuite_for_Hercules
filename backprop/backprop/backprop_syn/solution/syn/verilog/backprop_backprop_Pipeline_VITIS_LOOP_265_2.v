// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module backprop_backprop_Pipeline_VITIS_LOOP_265_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        activations3_2_0,
        activations3_1_0,
        activations3_0_0,
        activations1_address0,
        activations1_ce0,
        activations1_we0,
        activations1_d0,
        activations2_address0,
        activations2_ce0,
        activations2_we0,
        activations2_d0,
        activations3_2_1_out,
        activations3_2_1_out_ap_vld,
        activations3_1_1_out,
        activations3_1_1_out_ap_vld,
        activations3_0_1_out,
        activations3_0_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] activations3_2_0;
input  [63:0] activations3_1_0;
input  [63:0] activations3_0_0;
output  [5:0] activations1_address0;
output   activations1_ce0;
output   activations1_we0;
output  [63:0] activations1_d0;
output  [5:0] activations2_address0;
output   activations2_ce0;
output   activations2_we0;
output  [63:0] activations2_d0;
output  [63:0] activations3_2_1_out;
output   activations3_2_1_out_ap_vld;
output  [63:0] activations3_1_1_out;
output   activations3_1_1_out_ap_vld;
output  [63:0] activations3_0_1_out;
output   activations3_0_1_out_ap_vld;

reg ap_idle;
reg activations1_ce0;
reg activations1_we0;
reg activations2_ce0;
reg activations2_we0;
reg activations3_2_1_out_ap_vld;
reg activations3_1_1_out_ap_vld;
reg activations3_0_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln265_fu_160_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] j_cast29_fu_181_p1;
wire    ap_block_pp0_stage0;
reg   [6:0] j_fu_54;
wire   [6:0] add_ln265_fu_166_p2;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
reg   [63:0] activations3_0_1_fu_58;
wire   [63:0] select_ln268_2_fu_255_p3;
reg   [63:0] activations3_1_1_fu_62;
wire   [63:0] select_ln268_1_fu_247_p3;
reg   [63:0] activations3_2_1_fu_66;
wire   [63:0] select_ln268_fu_239_p3;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] trunc_ln269_fu_193_p1;
wire   [0:0] icmp_ln269_fu_197_p2;
wire   [0:0] icmp_ln269_1_fu_203_p2;
wire   [0:0] or_ln269_fu_209_p2;
wire   [0:0] icmp_ln268_fu_187_p2;
wire   [63:0] select_ln269_fu_215_p3;
wire   [63:0] select_ln269_1_fu_223_p3;
wire   [63:0] select_ln269_2_fu_231_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

backprop_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            activations3_0_1_fu_58 <= activations3_0_0;
        end else if (((icmp_ln265_fu_160_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            activations3_0_1_fu_58 <= select_ln268_2_fu_255_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            activations3_1_1_fu_62 <= activations3_1_0;
        end else if (((icmp_ln265_fu_160_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            activations3_1_1_fu_62 <= select_ln268_1_fu_247_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            activations3_2_1_fu_66 <= activations3_2_0;
        end else if (((icmp_ln265_fu_160_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            activations3_2_1_fu_66 <= select_ln268_fu_239_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_54 <= 7'd0;
        end else if (((icmp_ln265_fu_160_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_54 <= add_ln265_fu_166_p2;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        activations1_ce0 = 1'b1;
    end else begin
        activations1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln265_fu_160_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        activations1_we0 = 1'b1;
    end else begin
        activations1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        activations2_ce0 = 1'b1;
    end else begin
        activations2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln265_fu_160_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        activations2_we0 = 1'b1;
    end else begin
        activations2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln265_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        activations3_0_1_out_ap_vld = 1'b1;
    end else begin
        activations3_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln265_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        activations3_1_1_out_ap_vld = 1'b1;
    end else begin
        activations3_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln265_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        activations3_2_1_out_ap_vld = 1'b1;
    end else begin
        activations3_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln265_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign activations1_address0 = j_cast29_fu_181_p1;

assign activations1_d0 = 64'd0;

assign activations2_address0 = j_cast29_fu_181_p1;

assign activations2_d0 = 64'd0;

assign activations3_0_1_out = activations3_0_1_fu_58;

assign activations3_1_1_out = activations3_1_1_fu_62;

assign activations3_2_1_out = activations3_2_1_fu_66;

assign add_ln265_fu_166_p2 = (j_fu_54 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln265_fu_160_p2 = ((j_fu_54 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln268_fu_187_p2 = ((j_fu_54 < 7'd3) ? 1'b1 : 1'b0);

assign icmp_ln269_1_fu_203_p2 = ((trunc_ln269_fu_193_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln269_fu_197_p2 = ((trunc_ln269_fu_193_p1 == 2'd0) ? 1'b1 : 1'b0);

assign j_cast29_fu_181_p1 = j_fu_54;

assign or_ln269_fu_209_p2 = (icmp_ln269_fu_197_p2 | icmp_ln269_1_fu_203_p2);

assign select_ln268_1_fu_247_p3 = ((icmp_ln268_fu_187_p2[0:0] == 1'b1) ? select_ln269_1_fu_223_p3 : activations3_1_1_fu_62);

assign select_ln268_2_fu_255_p3 = ((icmp_ln268_fu_187_p2[0:0] == 1'b1) ? select_ln269_2_fu_231_p3 : activations3_0_1_fu_58);

assign select_ln268_fu_239_p3 = ((icmp_ln268_fu_187_p2[0:0] == 1'b1) ? select_ln269_fu_215_p3 : activations3_2_1_fu_66);

assign select_ln269_1_fu_223_p3 = ((icmp_ln269_1_fu_203_p2[0:0] == 1'b1) ? 64'd0 : activations3_1_1_fu_62);

assign select_ln269_2_fu_231_p3 = ((icmp_ln269_fu_197_p2[0:0] == 1'b1) ? 64'd0 : activations3_0_1_fu_58);

assign select_ln269_fu_215_p3 = ((or_ln269_fu_209_p2[0:0] == 1'b1) ? activations3_2_1_fu_66 : 64'd0);

assign trunc_ln269_fu_193_p1 = j_fu_54[1:0];

endmodule //backprop_backprop_Pipeline_VITIS_LOOP_265_2
